[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Apresentação",
    "section": "",
    "text": "Vantagens das Aplicações Web em Realidade Virtual\nO desenvolvimento de aplicações de Realidade Virtual (RV) em páginas e aplicativos web, utilizando tecnologias como HTML5, Javascript e CSS, oferece uma série de vantagens significativas em termos de flexibilidade, alcance e potencial. A natureza aberta e universal da web permite que aplicações desenvolvidas nessas linguagens sejam acessadas em uma ampla gama de dispositivos, desde computadores desktop e notebooks até smartphones, tablets e headsets de RV, sem a necessidade de compilações específicas para cada plataforma.\nAlém da portabilidade, a web oferece uma infraestrutura robusta para o desenvolvimento e distribuição de aplicações, com ferramentas de desenvolvimento acessíveis, bibliotecas gráficas poderosas como o Three.js e frameworks como o A-Frame que simplificam o processo de criação de experiências imersivas. A vasta comunidade de desenvolvedores web também contribui para a disponibilidade de recursos, tutoriais e exemplos de código, facilitando a aprendizagem e o desenvolvimento de aplicações.\nOutra vantagem não menos importante é a dispensa de instalações dispendiosas que ocupam dezenas de gigabytes no disco e necessitam de instalações de diversos plugins e dependências. Basta carregar os arquivos de texto escritos em HTML/Javascript diretamente no navegador de internet para se obter resultados poderosos. Como exemplo, na plataforma A-Frame basta você incluir a seguinte declaração no seu arquivo de texto html:\npara ter acesso direto e imediato (sem nenhuma instalação, pré-configuração ou pré-compilações dispendiosas e demoradas adicionais) aos recursos de todo o espectro da Realidade Estendida. Para citar apenas alguns desses recursos, destacamos:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Apresentação</span>"
    ]
  },
  {
    "objectID": "index.html#vantagens-das-aplicações-web-em-realidade-virtual",
    "href": "index.html#vantagens-das-aplicações-web-em-realidade-virtual",
    "title": "Apresentação",
    "section": "",
    "text": "&lt;script src=\"https://aframe.io/releases/1.6.0/aframe.min.js\"&gt;&lt;/script&gt;\n\n\nhand-controls: habilita o rastreamento das mãos e dispara eventos conforme movimentos específicos dos dedos\nhand-tracking-grab-controls: permite que objetos sejam agarrados com as mãos virtuais e deslocados\nlaser-controls: funciona como um laser pointer virtual usado para indicar ou selecionar objetos virtuais.\nsound: permite que fontes sonoras sejam atribuídas à localização de objetos virtuais específicos e promovendo estereoscopia auditiva.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Apresentação</span>"
    ]
  },
  {
    "objectID": "index.html#realidade-virtual-em-headsets-versus-smartphones",
    "href": "index.html#realidade-virtual-em-headsets-versus-smartphones",
    "title": "Apresentação",
    "section": "Realidade Virtual em Headsets versus Smartphones",
    "text": "Realidade Virtual em Headsets versus Smartphones\nEmbora a RV em smartphones ofereça acessibilidade e conveniência, os headsets de RV proporcionam experiências imersivas mais completas, com maior campo de visão, rastreamento de movimento mais preciso, visão estereoscópica, e a capacidade de isolar o usuário do ambiente externo, aumentando a sensação de presença no mundo virtual.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Apresentação</span>"
    ]
  },
  {
    "objectID": "index.html#webxr-a-api-para-realidade-virtual-na-web",
    "href": "index.html#webxr-a-api-para-realidade-virtual-na-web",
    "title": "Apresentação",
    "section": "WebXR: A API para Realidade Virtual na Web",
    "text": "WebXR: A API para Realidade Virtual na Web\nA WebXR é uma Interface de Programação de Aplicativos (API) que permite a criação de experiências de RV e Realidade Aumentada (RA) diretamente em páginas web, acessíveis através de navegadores de internet. A WebXR fornece uma camada de abstração entre o código da aplicação e os diferentes dispositivos de RV e RA, permitindo que os desenvolvedores criem experiências imersivas sem se preocupar com as especificidades de cada hardware.\nA API WebXR oferece funcionalidades para rastreamento de posição e orientação do headset e dos controladores, renderização de cenas 3D, interação com objetos virtuais e acesso a sensores do dispositivo.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Apresentação</span>"
    ]
  },
  {
    "objectID": "index.html#plataformas-web-para-realidade-virtual-com-webxr",
    "href": "index.html#plataformas-web-para-realidade-virtual-com-webxr",
    "title": "Apresentação",
    "section": "Plataformas Web para Realidade Virtual com WebXR",
    "text": "Plataformas Web para Realidade Virtual com WebXR\nExistem diversas plataformas e bibliotecas Javascript que utilizam a API WebXR para facilitar o desenvolvimento de aplicações de RV em páginas web. Algumas das mais populares incluem:\n\nThree.js: Uma biblioteca gráfica 3D completa e versátil, amplamente utilizada para a criação de jogos, animações e experiências interativas na web. O Three.js oferece uma ampla gama de funcionalidades para modelagem 3D, materiais, iluminação, animação e renderização, além de suporte à WebXR para a criação de experiências imersivas.\nBabylon.js: Outra biblioteca gráfica 3D popular, com foco na criação de jogos e experiências interativas de alto desempenho. O Babylon.js oferece uma interface amigável, um sistema de física integrado e suporte à WebXR.\nA-Frame: Um framework web para a criação de experiências de RV de forma declarativa, utilizando HTML. O A-Frame simplifica o desenvolvimento de RV, abstraindo a complexidade da biblioteca Three.js e permitindo a criação de cenas 3D com tags HTML. O A-Frame utiliza a WebXR para integrar as experiências imersivas com dispositivos compatíveis.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Apresentação</span>"
    ]
  },
  {
    "objectID": "index.html#principais-características-do-a-frame",
    "href": "index.html#principais-características-do-a-frame",
    "title": "Apresentação",
    "section": "Principais características do A-Frame",
    "text": "Principais características do A-Frame\nO A-Frame adota a filosofia de simplificar o desenvolvimento de experiências de RV na web, tornando-o acessível a um público mais amplo, incluindo desenvolvedores web com pouca ou nenhuma experiência em computação gráfica 3D.\nA filosofia do A-Frame se reflete em sua abordagem declarativa, que permite a criação de cenas 3D utilizando tags HTML, familiar aos desenvolvedores web. Essa abordagem abstrai a complexidade da biblioteca gráfica subjacente (Three.js), permitindo que os desenvolvedores se concentrem na estrutura e no conteúdo da experiência de RV.\nO A-Frame também se baseia no conceito “Entidade-Componente-Sistema” (ECS), que promove a modularidade e reutilização de código. As entidades representam os objetos na cena 3D, os componentes definem suas propriedades e funcionalidades, e os sistemas gerenciam o comportamento global da cena. Essa estrutura modular torna o código mais organizado, legível e fácil de manter.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Apresentação</span>"
    ]
  },
  {
    "objectID": "htmlbasico.html",
    "href": "htmlbasico.html",
    "title": "2  HTML/Javascript básico",
    "section": "",
    "text": "2.1 Estrutura básica de uma página HTML",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>HTML/Javascript básico</span>"
    ]
  },
  {
    "objectID": "htmlbasico.html#estrutura-básica-de-uma-página-html",
    "href": "htmlbasico.html#estrutura-básica-de-uma-página-html",
    "title": "2  HTML/Javascript básico",
    "section": "",
    "text": "2.1.1 Elementos HTML\nOs elementos HTML são incluídos com palavras reservadas na forma de tags HTML: &lt;bla&gt;&lt;/bla&gt; ou somente &lt;blas&gt;. Exemplos:\n\nTítulos de seção: &lt;h1&gt;Título&lt;/h1&gt;\nParágrafos: &lt;p&gt;Conteúdo do parágrafo&lt;/p&gt;\nBotões: &lt;button&gt;Texto do botão&lt;/button&gt;\nInputs de texto: &lt;input&gt;\n\n\nCopie e cole o conteúdo abaixo em um editor de texto para arquivos txt (bloco de notas no Windows, gedit no Linux, etc).\n&lt;h1&gt;Minha adorável página HTML&lt;/h1&gt;\n\n&lt;p&gt;Nesta página estou incluindo somente alguns elementos HTML para testar o seu uso. Algo muito simples, porém o HTML possui muitos outros recursos.&lt;/p&gt;\n\n&lt;p&gt;Elementos HTML podem ser aninhados uns dentro dos outros, como neste parágrafo, em que terminamos com essa entrada de texto usando o elemento \"input\": &lt;input&gt;&lt;/p&gt;\n\n&lt;p&gt;Clique nesse botão e veja o que acontece: &lt;button&gt;Clique em mim&lt;/button&gt; &lt;/p&gt;\nEm seguida, salve o arquivo com extensão html. Por exemplo: “arquivomeu.html”.\nAbra o arquivo com o navegador de internet (Chrome, Bing, Firefox, Safari, etc.)\nEdite o arquivo para incluir elementos novos criados por você. Salve o arquivo, recarregue a página e veja que suas alterações foram atualizadas na página.\n\n\n\n2.1.2 Adicionando lógica e programação com Javascript\nPara que coisas úteis aconteçam na página HTML, precisamos processar informação. Para isso, existe a linguagem Javascript que é incluída com a tag &lt;script&gt;&lt;/script&gt;.\n\nO código abaixo foi extraído de Silva (2016)1. Salve-o em um arquivo HTML e carregue no seu navegador de internet para ver o resultado.\n&lt;script&gt;\n    var a = 2;\n    var b = 3;\n    var c = a + b;\n    document.write(\"A soma de \" + a + \" com \" + b + \" resulta em \" + c);\n&lt;/script&gt;\nModifique o script anterior para efetuar a multiplicação de dois números. A operação de multiplicação é implementada com o caractere “*” (asterisco).\n\n\n\n2.1.3 Interagindo HTML com Javascript\nPara fazer com que elementos HTML específicos sejam modificados via código Javascript é necessário adicionar atributos a eles.\n\nNo código abaixo, um elemento de parágrafo inicialmente vazio recebe o atributo de identificação id e o elemento de botão recebe o atributo onclick. Dessa forma, quando o botão é clicado, a função processarClique() é chamada em que ela atualiza o texto do parágrafo pela sua identificação.\n&lt;h1&gt;Página dos apertadores de botão&lt;/h1&gt;\n\n&lt;p&gt;\n    &lt;button onclick=\"processarClique()\"&gt;\n        Botão incrível\n    &lt;/button&gt;\n&lt;/p&gt;\n\n&lt;p id=\"resultado\"&gt;&lt;p&gt;\n\n&lt;script&gt;\n    var clicadas = 0;\n\n    function processarClique() {\n        clicadas = clicadas + 1;\n        document.getElementById(\"resultado\").innerHTML = \"Você clicou \" + clicadas + \" vezes no Botão incrível.\";\n    }\n&lt;/script&gt;\nSalve o código acima em um arquivo .html e abra no seu navegador de internet para ver o resultado.\n\n\n\n\n\n\n\nVeja uma implementação mais precisa do código acima\n\n\n\n\n\n&lt;h1&gt;Página dos apertadores de botão&lt;/h1&gt;\n\n&lt;p&gt;\n    &lt;button onclick=\"processarClique()\"&gt;\n        Botão incrível\n    &lt;/button&gt;\n&lt;/p&gt;\n\n&lt;p id=\"resultado\"&gt;&lt;p&gt;\n\n&lt;script&gt;\n    var clicadas = 0;\n    \n    function processarClique() {\n        clicadas = clicadas + 1;\n\n        if (clicadas &gt; 1) {\n            document.getElementById(\"resultado\").innerHTML = \"Você clicou \" + clicadas + \" vezes no Botão incrível.\";\n        }\n        else {\n            document.getElementById(\"resultado\").innerHTML = \"Você clicou \" + clicadas + \" vez no Botão incrível.\";\n        }\n    }\n&lt;/script&gt;",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>HTML/Javascript básico</span>"
    ]
  },
  {
    "objectID": "htmlbasico.html#estrutura-completa-de-uma-página-html",
    "href": "htmlbasico.html#estrutura-completa-de-uma-página-html",
    "title": "2  HTML/Javascript básico",
    "section": "2.2 Estrutura completa de uma página HTML",
    "text": "2.2 Estrutura completa de uma página HTML\nUma página HTML completa, em geral, vai ser dividida em três arquivos:\n\nindex.html: é o arquivo principal e o primeiro a ser carregado pelo navegador de internet.\nscript.js: é o arquivo em que a programação Javascript fica melhor separada e organizada.\nstyle.css: é o arquivo de estilos que altera a aparência e às, vezes, a funcionalidade dos elementos HTML.\n\nEm que o arquivo index.html terá uma estrutura semelhante a esta:\n&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n\n    &lt;!-- Aqui é incluído o preâmbulo com as configurações da página --&gt;\n    &lt;head&gt;\n\n        &lt;!-- Este é o título (opcional) da página --&gt;    \n        &lt;title&gt;Hello World!&lt;/title&gt;\n\n        &lt;!-- Aqui é carregado a arquivo de estilos --&gt;\n        &lt;link rel=\"stylesheet\" href=\"/style.css\" /&gt;\n\n        &lt;!-- Aqui é carregado o arquivo Javascript --&gt;\n        &lt;script src=\"/script.js\" defer&gt;&lt;/script&gt;\n\n    &lt;/head&gt;\n\n    &lt;!-- Aqui é incluído todo o HTML e, caso queira, o Javascript também --&gt;\n    &lt;body&gt;\n\n        &lt;h1&gt;Minha página web completa&lt;/h1&gt;\n\n        &lt;p&gt;Meu sucinto parágrafo.&lt;/p&gt;\n\n        &lt;button&gt;Meu inútil botão&lt;/button&gt;\n\n        &lt;!-- Você também pode colocar código Javascript aqui --&gt;\n        &lt;script&gt;\n\n            var x = 3;\n            var y = 2;\n            var z = x + y;\n\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\nPodemos criar arquivos txt para cada um dos três arquivos e abrir o arquivo HTML no navegador de internet como vínhamos fazendo até aqui. Entretanto, a partir de agora começaremos a colocar nossas páginas diretamente na Internet.\n\nAprender mais sobre HTML/Javascript/CSS",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>HTML/Javascript básico</span>"
    ]
  },
  {
    "objectID": "htmlbasico.html#sec-glitch",
    "href": "htmlbasico.html#sec-glitch",
    "title": "2  HTML/Javascript básico",
    "section": "2.3 Disponibilizando páginas web diretamente na Internet com Glitch",
    "text": "2.3 Disponibilizando páginas web diretamente na Internet com Glitch\nExistem diversas plataformas gratuitas que permitem a hospedagem de páginas web. Entre elas, podemos destacar:\n\nReplit\nCodeSandbox\nGitHub Pages\nGlitch\n\nNeste minicurso usaremos o Glitch.\nGlitch é uma plataforma online para desenvolvimento e hospedagem de aplicações web, permitindo edição colaborativa em tempo real diretamente no navegador. Páginas criadas no Glitch são disponibilizadas quase que instantaneamente em um endereço de internet de acesso público.\nVamos começar a partir de um projeto básico que criamos para este minicurso.\n\nAcesse: https://glitch.com/edit/#!/fishy-foil-technosaurus\n\nAo acessar esse projeto, você deverá observar a tela abaixo.\n\n\n\nPrint da tela do projeto fishy-foil-technosaurus no Glitch\n\n\nA tela apresenta basicamente dois painéis:\n\nO painel de arquivos e configurações à esquerda.\nO painel de código à direita que mostra o conteúdo do arquivo escolhido no painel de arquivo.\n\nNo canto inferior direito há o botão de preview, que renderiza (gera/compila) a página index.html que será mostrada para quem acessar a página no endereço público do projeto.\n\nAgora, antes de começar a editar e trabalhar em projetos no Glitch, é importante criar uma conta nele, pois isso permitirá acessar os projetos posteriormente.\nApós criar a conta, acesse novamente a edição do projeto fishy-foil-technosaurus e clique no botão Remix do Edit localizado no canto superior direito.\n\n\n\n\n\n\n\nTarefa\n\n\n\n\nA partir do fishy-foil-technosaurus remixado, implemente o botão contador de clicadas que fizemos anteriormente no editor de texto.\n\n\n\nClicando em Settings no painel de arquivos e configurações você pode alterar o nome do projeto.\nPara finalizar, com o botão Share você pode compartilhar o seu projeto de três formas diferentes:\n\nPágina web final (Live site): https://fishy-foil-technosaurus.glitch.me\nEdição do código [Code]: https://glitch.com/edit/#!/fishy-foil-technosaurus\nApresentação do Projeto [Project Page]: https://glitch.com/~fishy-foil-technosaurus\n\n\nAprender mais sobre o Glitch",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>HTML/Javascript básico</span>"
    ]
  },
  {
    "objectID": "htmlbasico.html#footnotes",
    "href": "htmlbasico.html#footnotes",
    "title": "2  HTML/Javascript básico",
    "section": "",
    "text": "Silva, Nelson Canzian da. 2016. Física Com JavaScript. Depto de Física - UFSC. https://canzian.prof.ufsc.br/fisicacomjavascript/fjs-00-tudo.pdf.↩︎",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>HTML/Javascript básico</span>"
    ]
  },
  {
    "objectID": "projetoSTL.html",
    "href": "projetoSTL.html",
    "title": "3  O projeto Sol-Terra-Lua",
    "section": "",
    "text": "3.1 Elementos HTML do A-Frame\nTodo o desenvolvimento do projeto será realizado no Glitch. Vide Seção 2.3.\nRepare que o projeto está bastante vazio, com apenas o arquivo index.html e sem qualquer código Javascript explícito. Entretanto, temos dentro do head a inclusão do arquivo online:\nhttps://aframe.io/releases/1.6.0/aframe.min.js.\nÉ esse arquivo, acessado remotamente, que disponibilizará o núcleo de funcionalidades do A-Frame.\nDentro do a-scene todos os elementos espaciais do projeto serão incluídos. Esses elementos recebem o nome de a-entity (Entidades). Cada entidade, por sua vez, terá uma série de propriedades, chamadas de components (Componentes). Por fim, cada componente terá atributos que definirão as aparências e funcionalidades da entidade.\nEsse tipo de estruturação segue o modelo ECS (Entity-Component-System) que é alternativo ao modelo de classes e objetos. Ele se opõe ao sistema de hierarquização da programação orientada a objetos ao permitir maior modularização e inter-operacionalização dos componentes que podem ser aplicados diretamente em diferentes entidades.\nDe forma abstrata, uma estrutura ECS no A-Frame poderia ser algo assim:\nCena:\nUm exemplo mais concreto seria:\na-scene:\nNesse exemplo, carro e moto são entidades distintas, mas rodas e material são componentes que podem ser usados pelas diferentes entidades. Esses componentes irão se diferenciar por possuírem valores diferentes para os seus atributos (e.g. rodas com quantidade : 2 ou quantidade : 4) e por estarem atrelados a diferentes entidades. Uma das vantages dessa abordagem ECS é que eu preciso programar o componente rodas somente uma vez e ele pode ser usado em diferentes veículos.\nEntidades podem ser aninhadas. Por exemplo, ao invés de tratar as rodas como sendo componentes, poderíamos considerar mais apropriado implementá-las na forma de uma entidade:\na-scene:\nVamos então criar nossa primeira entidade: o planeta Terra.\nSe fizermos o preview da cena no Glitch poderemos observar a esfera de diferentes ângulos usando o mouse. Mas não conseguiremos dar zoom ou deslocamentos laterais na imagem. Isso ocorre pois não estamos usando os óculos de realidade virtual. A melhor forma de interagir com a página gerada na tela do computador, sem os óculos, é escolhendo a opção Preview in a new window no Glitch. Na página que foi aberta, devemos entrar no modo de inspeção (Visual inspector) ao digitar a combinação de teclas &lt;ctrl&gt; + &lt;alt&gt; + i.\nNesse modo, cada botão do mouse, quando mantido apertado, permite rotacionar, transladar e aproximar/afastar a visão da cena. Ao clicar em uma entidade é possível também aferir e alterar os valores dos seus atributos. É possível até mesmo criar entidades novas e atribuir componentes no Visual inspector. Ao apertar a tecla h (help), temos acesso a todas as teclas de atalho.\nVoltando à Terra, vamos “dar um talento” em nosso pale blue dot.1 Para isso, usaremos uma imagem planificada da superfície da Terra para projetá-la na esfera. Por sorte, o A-Frame faz isso muito diretamente para a gente. Vejamos como.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>O projeto Sol-Terra-Lua</span>"
    ]
  },
  {
    "objectID": "projetoSTL.html#elementos-html-do-a-frame",
    "href": "projetoSTL.html#elementos-html-do-a-frame",
    "title": "3  O projeto Sol-Terra-Lua",
    "section": "",
    "text": "Faça o login na sua conta do Glitch e remixe o projeto aframe-minicurso-vr\n\n\n\n\n\nO elemento HTML básico e obrigatório do A-Frame é o a-scene (Cena), o qual temos que incluir dentro do elemento body conforme o Código 3.1.\n\n\n\n\n&lt;body&gt;\n    &lt;a-scene&gt;\n    &lt;/a-scene&gt;\n&lt;/body&gt;\n\n\nCódigo 3.1: O elemento básico, a-scene, de uma página HTML com A-Frame.\n\n\n\n\n\n\n\n\nEntidade 1:\n\nComponente A -&gt; Atributo A1: valor E1A1; Atributo A2: valor E1A2\nComponente B -&gt; Atributo B1: valor E1B1; Atributo B2: valor E1B2\n\nEntidade 2:\n\nComponente A -&gt; Atributo A1: valor E2A1; Atributo A2: valor E2A2\nComponente C -&gt; Atributo C1: valor E2C1; Atributo C2: valor E2C2\n\n\n\n\n\na-entity id = \"carro\":\n\nrodas = \"quantidade : 4; aro: 20\"\nmaterial = \"cor: azul; metalicidade: 0.5\"\n\na-entity id = \"moto\":\n\nrodas = \"quantidade : 2; aro: 40\"\nmaterial = \"cor: vermelho; metalicidade: 0.8\"\n\n\n\n\n\n\n\n\nFigura 3.1: Ilustração das Entidades carro e moto com seus componentes e atributos específicos (feita com DALL-E)\n\n\n\n\n\n\n\na-entity id = \"fusca\":\n\na-entity id = \"rodas_do_fusca\":\n\nmaterial = \"cor: preto; metalicidade: 0.1\"\ndimensoes = \"aro: 20; largura: 10; quantidade: 4\"\n\n\na-entity id = \"moto\":\n\nrodas = \"quantidade : 2; aro: 40\"\nmaterial = \"cor: vermelho; metalicidade: 0.8\"\n\n\n\n\nColoque a entidade do Código 3.2 dentro do elemento a-scene do Código 3.1.\n\n\n\n\n&lt;a-entity id=\"terra\"\n    geometry=\"primitive: sphere\"\n    material=\"color: blue\"&gt;\n&lt;/a-entity&gt;\n\n\nCódigo 3.2: Início da criação do planeta Terra – uma esfera azul por enquanto.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>O projeto Sol-Terra-Lua</span>"
    ]
  },
  {
    "objectID": "projetoSTL.html#carregando-arquivos-externos-em-nosso-projeto-stl",
    "href": "projetoSTL.html#carregando-arquivos-externos-em-nosso-projeto-stl",
    "title": "3  O projeto Sol-Terra-Lua",
    "section": "3.2 Carregando arquivos externos em nosso projeto STL",
    "text": "3.2 Carregando arquivos externos em nosso projeto STL\nO A-Frame possui um elemento chamado a-asset para pré-carregar todos os recursos (imagens, áudios, vídeos, etc) que sejam usados na página. Existem duas formas para fazer isso:\n\nCarregando o recurso dentro do Glitch via Files no menu lateral de arquivos.\nIndicando o endereço de internet (URL) do recurso caso ele esteja disponível.\n\nNeste minicurso, vamos usar somente a segunda opção.\n\nClique com o botão direito do mouse sobre o mapa da Terra abaixo e copie o seu link.\n\n\n\n\nMapa terrestre em projeção cilíndrica (equirectangular). Fonte: Wikimedia\n\n\n\nDentro do elemento a-scene inclua o elemento img conform e o Código 3.3.\n\n\n\n\n&lt;a-assets&gt;\n    &lt;img id=\"mapa_terra\" src=\"substitua_isto_pelo_endereço_da_imagem\"&gt;\n&lt;/a-assets&gt;\n\n\nCódigo 3.3: Inclusão de imagens e outros recursos via elemento a-asset.\n\n\n\n\nEm seguida substitua o atributo color por src no componente material da entidade terra, usando como valor a id do mapa da Terra, resultando no Código 3.4\n\n\n\n\n&lt;a-entity id=\"terra\"\n    geometry=\"primitive: sphere\"\n    material=\"src: #mapa_terra\"&gt;\n&lt;/a-entity&gt;\n\n\nCódigo 3.4: Entidade terracom atributo src no lugar de color.\n\n\n\n\n\n\n\n\n\nDica de navegabilidade\n\n\n\n\n\nAlém do Visual Inspector, o A-Frame possui um componente para navegação mais facilitada na cena quando não estamos usando os óculos de Realidade Virtual. Para incluí-lo no projeto basta incluir o script abaixo dentro element head:\n&lt;script src=\"https://unpkg.com/aframe-orbit-controls@1.3.2/dist/aframe-orbit-controls.min.js\"&gt;&lt;/script&gt;\nE incluir a seguinte a-entity de câmera dentro do elemento a-scene:\n&lt;a-entity camera look-controls=\"enabled: false\" orbit-controls=\"target: 0 0 0; minDistance: 0; maxDistance: 180; initialPosition: 0 3 5; rotateSpeed: 1.5\"&gt;&lt;/a-entity&gt;",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>O projeto Sol-Terra-Lua</span>"
    ]
  },
  {
    "objectID": "projetoSTL.html#sistemas-de-coordenadas-no-a-frame",
    "href": "projetoSTL.html#sistemas-de-coordenadas-no-a-frame",
    "title": "3  O projeto Sol-Terra-Lua",
    "section": "3.3 Sistemas de coordenadas no A-Frame",
    "text": "3.3 Sistemas de coordenadas no A-Frame\nUm conceito fácil de implementar no A-Frame são os sistemas de coordenadas locais (também chamados de referenciais), que são produzidos quando você aninha uma a-entity dentro de outra.\nPense que cada entidade tem seu próprio sistema de coordenadas (x, y, z), que define sua posição, rotação e escala. Quando uma a-entity está dentro de outra, dizemos que a entidade interna usa o sistema de referência local da entidade que a contém. Isso significa que qualquer transformação (movimento, rotação) aplicada à entidade “pai” afeta todas as suas “filhas” de forma relativa. Ou seja, quando criamos uma a-entity, não definimos apenas as propriedades do objeto 3D pelas suas componentes, mas também, implicitamente, criamos um sistema de coordenadas local.\nPodemos, ainda, criar uma a-entity sem componentes geométricos ou atributos. Nesse caso, ela serve exclusivamente como um sistema de coordenadas de referência para todas as outras entidades que sejam aninhadas dentro dela.\nE o nosso projeto Sol-Terra-Lua se beneficia diretamente desse recurso. Vamos considerar uma a-entity que representa, exclusivamente, o referencial Terra (ref_terra) e dentro dela outra a-entity que representa a Lua. Se você mover ou rotacionar o referencial Terra (a entidade “pai”), a Lua (a entidade “filha”) será movida junto, mas ela ainda pode orbitar ao redor do referencial Terra se aplicarmos uma rotação à Lua individualmente. Assim, a Lua se move de duas maneiras: ela orbita o Sol ao “seguir” a Terra (movimento da entidade “pai”) e orbita a Terra (movimento da entidade “filha”).2 O Vídeo 3.1 ilustra esse conceito.\n\n\n\nVideo\n\n\nVídeo 3.1: Ao deslocar a a-entity ref-Terra (referencial “pai”), a a-entity lua (entidade filha) desloca-se conjuntamente. Ao deslocar a a-entity lua, a a-entity ref_Terra permanece inalterada.\n\n\n\nPortanto, o A-Frame é muito prático para simular cenários em que o movimento de um objeto depende de outro, como no caso de planetas em órbita, satélites, ou até objetos conectados em uma cadeia de eventos. Ao invés de ter que recalcular constantemente as posições de todos os objetos manualmente, o A-Frame faz isso automaticamente ao respeitar as hierarquias de aninhamento.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>O projeto Sol-Terra-Lua</span>"
    ]
  },
  {
    "objectID": "projetoSTL.html#cada-astro-em-seu-lugar",
    "href": "projetoSTL.html#cada-astro-em-seu-lugar",
    "title": "3  O projeto Sol-Terra-Lua",
    "section": "3.4 Cada astro em seu lugar",
    "text": "3.4 Cada astro em seu lugar\nNeste ponto, temos todos os elementos para a construção do sistema Sol-Terra-Lua.\n\nPrimeiramente, vamos atualizar os nossos assets com as imagens das superfícies do Sol e da Lua conforme o Código 3.5.\n\n\n\n\n&lt;a-assets&gt;\n    &lt;img id=\"mapa_sol\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Map_of_the_full_sun.jpg/1280px-Map_of_the_full_sun.jpg\"&gt;\n    &lt;img id=\"mapa_terra\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Blue_Marble_2002.png/1280px-Blue_Marble_2002.png\"&gt;\n    &lt;img id=\"mapa_lua\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Solarsystemscope_texture_8k_moon.jpg/1280px-Solarsystemscope_texture_8k_moon.jpg\"&gt;\n&lt;/a-assets&gt;\n\n\nCódigo 3.5: Imagens dos mapas em projeção cilíndrica de todos os astros do projeto incluídos como assets.\n\n\n\nVamos agora inserir cada astro em seu devido lugar e com o seu devido tamanho. Poderíamos respeitar a escala relativa de tamanhos, mas como o Sol é muito maior que a Terra (cerca de 100 vezes), vamos adotar uma escala alternativa para fins didáticos. O mesmo vale para as distâncias entre os astros (a distância Sol-Terra é quae 400 vezes maior que a Terra-Lua).\nA Tabela 3.1 contém os tamanhos (raios esféricos) e distâncias ao astro “pai” (raios orbitais) dos astros do projeto.\n\n\n\nTabela 3.1: Dimensões dos astros em valores reais (real) e com os valores utilizados (util) no projeto.\n\n\n\n\n\n\n\n\n\n\nAstro\nRaio esférico\nRaio orbital\n\n\n\n\nSol\n\nreal: 700 mil km\nutil: 30 cm\n\n\nnão se aplica\nnão se aplica\n\n\n\nTerra\n\nreal: 6,4 mil km\nutil: 15 cm\n\n\nreal: 150 milhões km\nutil: 1,5 m\n\n\n\nLua\n\nreal: 1,7 mil km\nutil: 5 cm\n\n\nreal: 384 mil km\nutil: 0,5 m\n\n\n\n\n\n\n\nVamos criar o sistema de coordenadas de cada astro a uma distância do astro “pai” igual aos raios orbitais (util) da Tabela 3.1. O Sol será a entidade que comporá o sistema de coordenadas pai. Dentro dele, criaremos uma entidade para o referencial Terra e, dentro deste, o referencial Lua.\nTeremos, portanto, o seguinte aninhamento de sistemas de coordenadas:\n&lt;a-entity id=\"pos_sol\" position=\"0 0 0\"&gt;\n    &lt;a-entity id=\"pos_terra\" position=\"1.5 0 0\"&gt;\n        &lt;a-entity id=\"pos_lua\" position=\"0 0 0.5\"&gt;        \n        &lt;/a-entity&gt;\n    &lt;/a-entity&gt;    \n&lt;/a-entity&gt;\nRepare que para as distâncias usamos o componente position cujo atributo é uma trinca de coordenadas x, y, z.\nAgora, vamos colocar a entidade que representa a esfera de cada astro dentro dos respectivos referenciais. Para isso, substitua o Código 3.4 pelo Código 3.6.\n\n\n\n&lt;a-entity id=\"pos_sol\" position=\"0 0 0\"&gt;\n    \n    &lt;a-entity id=\"sol\"\n        geometry=\"primitive: sphere; radius: 0.3\"\n        material=\"src: #mapa_sol\"&gt;\n    &lt;/a-entity&gt;\n    \n    &lt;a-entity id=\"pos_terra\" position=\"1.5 0.0 0\"&gt;  \n\n        &lt;a-entity id=\"terra\"\n            geometry=\"primitive: sphere; radius: 0.15\"\n            material=\"src: #mapa_terra\"&gt;\n        &lt;/a-entity&gt;            \n\n        &lt;a-entity id=\"pos_lua\" position=\"0 0.0 0.5\"&gt;                \n\n            &lt;a-entity id=\"lua\"\n                geometry=\"primitive: sphere; radius: 0.05\"\n                material=\"src: #mapa_lua\"&gt;\n            &lt;/a-entity&gt;\n    \n        &lt;/a-entity&gt;                \n    &lt;/a-entity&gt;        \n&lt;/a-entity&gt;\n\n\nCódigo 3.6: Todos os astros com seus respectivos mapas de superfície aninhado em seus respectivos referenciais (entidades).\n\n\n\nRepare que para o raio esférico de cada astro usamos o atributo radius do componente geometry. Outra observação é que todas as dimensões são informadas ao A-Frame sem explicitar as unidades, pois o A-Frame considera todas elas em metros por padrão. A Figura 3.2 mostra a disposição geométrica do sistema.\n\n\n\n\n\n\nFigura 3.2: Sol-Terra-Lua gerado pelo código 7 e visto de cima. Cada divisão do grid (em cinza claro) corresponde a 0,5 metros. As setas correspondem às direções x (vermelha à direita), y (verde saindo da tela) e z (azul para baixo).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>O projeto Sol-Terra-Lua</span>"
    ]
  },
  {
    "objectID": "projetoSTL.html#animando-as-coisas",
    "href": "projetoSTL.html#animando-as-coisas",
    "title": "3  O projeto Sol-Terra-Lua",
    "section": "3.5 Animando as coisas",
    "text": "3.5 Animando as coisas\nComo já dizia o sábio Galileu, “Eppur si muove”.3 Vamos então pôr o mundo a girar.\nO A-Frame possui várias possibilidades de animação built in através do componente animation. Os atributos principais desse componente são:\n\nproperty: a propriedade da entidade que será animada, e.g. ângulo de rotação, posição, grau de transparência, etc.\nfrom: o valor inicial da propriedade (default: o valor atual).\nto: o valor final da propriedade ao término da animação.\ndur: duração da animação em milissegundos.\nloop: se a animação deve ser reiniciada automaticamente (true ou false).\neasing: a taxa de variação da propriedade (default: aumento quadrático = aceleração constante).\ndir: sentido da animação (normal ou reverse).\n\n\n3.5.1 Movimento orbital\nO movimento orbital, também conhecido por movimento de translação, será implementado por uma entidade específica (e.g. orb_terra) colocada acima da entidade do raio orbital (e.g. pos_terra). Essa entidade terá o componente animation que rotacionará a a-entity pos_terra que por sua vez está deslocada do centro pelo raio orbital especificado na componente position.\nDa mesma forma que fizemos com as dimensões espaciais, não seremos fieis às proporções temporais da dinâmica dos astros. A Tabela 3.2 contém os períodos de rotação e orbital que escolhemos para os três astros.\n\n\n\nTabela 3.2: Períodos dos astros em valores reais (real) e com os valores utilizados no projeto (util)\n\n\n\n\n\n\n\n\n\n\nAstro\nPeríodo de rotação\nPeríodo orbital\n\n\n\n\nSol\n\nreal: 30 dias\nutil: 50 s\n\n\nnão se aplica\nnão se aplica\n\n\n\nTerra\n\nreal: 24 horas\nutil: 10 s\n\n\nreal: 365,3 dias\nutil: 300 s\n\n\n\nLua\n\nreal: 29,5 dias\nutil: 30 s\n\n\nreal: 29,5 dias\nutil: 30 s\n\n\n\n\n\n\n\nPor exemplo, considerando somente o movimento orbital da Terra, teríamos o seguinte código:\n&lt;a-entity id=\"orb_terra\" animation=\"property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear\"&gt;\n    \n    &lt;a-entity id=\"pos_terra\" position=\"1.5 0.0 0\"&gt;  \n\n        &lt;a-entity id=\"terra\"\n            geometry=\"primitive: sphere; radius: 0.15\"\n            material=\"src: #mapa_terra\"&gt;\n        &lt;/a-entity&gt;\n\n    &lt;/a-entity&gt;               \n\n&lt;/a-entity&gt;\nCom ele, deveremos observar a Terra orbitando em torno do Sol ad aeternum (loop: true) com velocidade constante (easing: linear) e executando uma revolução (to: 0 360 0) a cada 300 segundos (dur: 300000) conforme Vídeo 3.2.\n\n\n\nVideo\n\n\nVídeo 3.2: Ilustração do movimento orbital da Terra usando o animation da a-entity orb_terra. A cada órbita completa a Terra dá, também, uma volta em torno do próprio eixo (quando próxima à câmera apresenta a África voltada para nós, quando longe apresenta o Pacífico). (10x faster)\n\n\n\nCom isso, conseguimos implementar o movimento orbital da Terra. Entretanto, essa animation produz, adicionalmente, um movimento de rotação da Terra em torno do próprio eixo. Esse é um efeito indesejado, pois queremos que o movimento de rotação e o orbital sejam independentes um do outro.\nSe quisermos implementar corretamente a rotação da Terra e da Lua em torno de um eixo fixo, temos que compensar essa rotação espúria. Caso contrário, a direção do eixo ficará girando em torno da perpendicular à órbita em um movimento conhecido como precessão.4\nPara reverter essa rotação indesejada, podemos utilizar uma animation de rotação no sentido contrário dir: reverse em uma nova entidade a-entity rev_rot_terra dentro da a-entity pos_terra. Ficando da seguinte forma:\n&lt;a-entity id=\"orb_terra\" animation=\"property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear\"&gt;\n\n    &lt;a-entity id=\"pos_terra\" position=\"1.5 0.0 0\"&gt;  \n\n        &lt;a-entity id=\"rev_rot_terra\" animation=\"property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear; dir: reverse\"&gt;\n                            \n            &lt;a-entity id=\"terra\"\n                geometry=\"primitive: sphere; radius: 0.15\"\n                material=\"src: #mapa_terra\"&gt;\n            &lt;/a-entity&gt;                            \n\n        &lt;/a-entity&gt;               \n    &lt;/a-entity&gt;        \n&lt;/a-entity&gt;\nEsse código resulta no movimento orbital da Terra sem o movimento espúrio de rotação em torno do próprio eixo, conforme vemos no Vídeo 3.3.\n\n\n\nVideo\n\n\nVídeo 3.3: Ilustração do movimento orbital da Terra com a compensação da rotação espúria em torno do próprio eixo usando um animation com rotação no sentido contrário dir:reverse. Nesse caso, a Terra não gira em torno do próprio eixo, estando as Américas sempre voltadas para a câmera. (10x faster)\n\n\n\n\n\n3.5.2 Movimento de rotação\nAgora vamos implementar o movimento desejado de rotação da Terra em torno do próprio eixo.\nFazemos isso incluindo o componente animation na a-entity terra:\n&lt;a-entity id=\"terra\"\n    geometry=\"primitive: sphere\"\n    material=\"src: #mapa_terra\"\n1    animation=\"property: rotation; to: 0 360 0; loop: true; dur: 10000; easing: linear\"&gt;\n&lt;/a-entity&gt;\n\n1\n\nComponente animation para rotação da Terra.\n\n\nAssim, deveremos observar a Terra girando ad aeternum (loop: true) com velocidade constante (easing: linear) e executando uma revolução (to: 0 360 0) a cada 10 segundos (dur: 10000). O Vídeo 3.4 mostra esse movimento isoladamente (sem o movimento orbital).\n\n\n\nVideo\n\n\nVídeo 3.4: Terra em movimento de rotação com o componente animation.\n\n\n\n\n\n3.5.3 Movimento completo\n\nImplementado os movimentos de rotação e orbital discutidos acima no sistema Sol-Terra-Lua completo temos o Código 3.7 que substitui o Código 3.6\n\n\n\n\n&lt;a-entity id=\"pos_sol\" position=\"0 0 0\"&gt;\n    \n    &lt;a-entity id=\"sol\"\n        geometry=\"primitive: sphere; radius: 0.3\"\n        material=\"src: #mapa_sol\"\n        animation=\"property: rotation; to: 0 360 0; loop: true; dur: 50000; easing: linear\"&gt;\n    &lt;/a-entity&gt;\n    \n    &lt;a-entity id=\"orb_terra\" animation=\"property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear\"&gt;\n\n        &lt;a-entity id=\"pos_terra\" position=\"1.5 0.0 0\"&gt;  \n\n            &lt;a-entity id=\"rev_rot_terra\" animation=\"property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear; dir: reverse\"&gt;\n                                \n                &lt;a-entity id=\"terra\"\n                    geometry=\"primitive: sphere; radius: 0.15\"\n                    material=\"src: #mapa_terra\"\n                    animation=\"property: rotation; to: 0 360 0; loop: true; dur: 10000; easing: linear\"&gt;\n                &lt;/a-entity&gt;                            \n\n                &lt;a-entity id=\"orb_lua\" animation=\"property: rotation; to: 0 360 0; loop: true; dur: 30000; easing: linear\"&gt;\n\n                    &lt;a-entity id=\"pos_lua\" position=\"0 0.0 0.5\"&gt;                \n\n                        &lt;a-entity id=\"lua\"\n                            geometry=\"primitive: sphere; radius: 0.05\"\n                            material=\"src: #mapa_lua\"&gt;\n                        &lt;/a-entity&gt;\n                \n                    &lt;/a-entity&gt;                \n                &lt;/a-entity&gt; \n            &lt;/a-entity&gt;               \n        &lt;/a-entity&gt;        \n    &lt;/a-entity&gt;        \n&lt;/a-entity&gt;\n\n\nCódigo 3.7: Sistema STL com movimento orbital e de rotação da Terra.\n\n\n\nHá algo importante a observar no código acima. Não implementamos a a-entity rev_lua relacionada à compensação da rotação espúria causada pelo movimento orbital da Lua e nem o animation de rotação da Lua em torno do próprio eixo na a-entity lua. Sabemos que devido ao efeito de “travamento gravitacional” produzido pelas forças de maré atuando ao longo de milhões de anos, a Lua orbita com a mesma face voltada para a Terra. Isso implica que o período de translação coincide com o de rotação. Portanto, nesse caso, a rotação espúria da a-entity orb_lua já nos fornece, de brinde, a rotação da Lua em torno do próprio eixo.\n\n\n\nVideo\n\n\nVídeo 3.5: Sistema Sol-Terra-Lua com todos os movimentos – de rotação e orbital – implementados, visto de cima. (10x faster)\n\n\n\n\n\n\n\n\n\nDica\n\n\n\nAo entrar no modo de inspeção (&lt;ctrl&gt;&lt;alt&gt;i), a Terra ainda estará parada. Isso ocorre pois devemos acionar o botão ▶ (resume scene) no canto superior esquerdo.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>O projeto Sol-Terra-Lua</span>"
    ]
  },
  {
    "objectID": "projetoSTL.html#refinando-o-sistema",
    "href": "projetoSTL.html#refinando-o-sistema",
    "title": "3  O projeto Sol-Terra-Lua",
    "section": "3.6 Refinando o sistema",
    "text": "3.6 Refinando o sistema\nSe quisermos explorar conceitos como estações do ano, fases da Lua e eclipses, existem certos detalhes do movimento dos astros que podemos abrir mão, como a excentricidade das órbitas, o movimento em torno do centro de massa, movimento de precessão e nutação, entre outros. Mas alguns são essenciais para aqueles fenômenos. São eles:\n\na inclinação do eixo de rotação da Terra e\na inclinação do plano da órbita da Lua.\n\n\n3.6.1 Inclinação do eixo de rotação da Terra\nComo sabemos, o eixo de rotação da Terra possui uma inclinação de 23,4° em relação à direção perpendicular ao plano da órbita. Em nosso sistema, podemos implementar essa inclinação em uma nova a-entity inc_terra colocada imediatamente acima da a-entity terra, usando o componente rotation:\n&lt;a-entity id=\"inc_terra\" rotation=\"23.4 0 0\"&gt;\n    &lt;a-entity id=\"terra\"\n        geometry=\"primitive: sphere; radius: 0.15\"\n        material=\"src: #mapa_terra\"\n        animation=\"property: rotation; to: 0 360 0; loop: true; dur: 10000; easing: linear\"&gt;\n    &lt;/a-entity&gt;\n&lt;/a-entity&gt;    \nRepare que a rotação se dá na direção \\(x\\), uma vez que a perpendicular da órbita está na direção \\(y\\).\n\n\n3.6.2 Inclinação do plano orbital da Lua\nO plano da órbita da Lua em torno da Terra possui uma inclinação de 5,14° em relação ao plano da órbita da Terra em torno do Sol.5 Apesar de não ser uma inclinação tão alta, é ela que faz com que não tenhamos um eclipse em cada lua nova (Lua entre o Sol e a Terra) ou em cada lua cheia (Terra entre o Sol e a Lua) – ou seja, um eclipse solar e outro lunar todo mês.\nComo não estamos utilizando uma escala de tamanhos e distâncias proporcionais ao tamanho real dos astros, precisamos usar uma inclinação maior para reproduzir, aproximadamente, efeito dos eclipses em nosso sistema. Adotaremos uma inclinação de 25°. Faremos isso aplicando o componente rotation na nova entidade a-entity inc_orb_lua imediatamente acima da a-entity orb_lua, conforme o código a seguir.\n&lt;a-entity id=\"inc_orb_lua\" rotation=\"-25 0 0\"&gt;\n\n    &lt;a-entity id=\"orb_lua\" animation=\"property: rotation; to: 0 360 0; loop: true; dur: 30000; easing: linear\"&gt;    \n\n        &lt;a-entity id=\"rev_orb_lua\" animation=\"property: rotation; to: 0 360 0; loop: true; dur: 30000; easing: linear; dir: reverse\"&gt;\n\n            &lt;a-entity id=\"pos_lua\" position=\"0 0.0 0.5\"&gt;                \n\n                &lt;a-entity id=\"lua\"\n                    geometry=\"primitive: sphere; radius: 0.05\"\n                    material=\"src: #mapa_lua\"&gt;\n                &lt;/a-entity&gt;\n\n            &lt;/a-entity&gt;\n        &lt;/a-entity&gt;            \n    &lt;/a-entity&gt;            \n&lt;/a-entity&gt;                \n\n\n3.6.3 The dark side of the Moon\nEmbora não implique em qualquer efeito prático importante, orientar a Lua com a face correta voltada para a Terra é uma questão simples de resolver e dá mais realismo ao sistema. Verificamos que uma simples rotação de 90° na a-entity lua resolve a questão:\n&lt;a-entity id=\"lua\"\n    geometry=\"primitive: sphere; radius: 0.05\"\n    material=\"src: #mapa_lua\"\n    rotation=\"0 90 0\"&gt;\n&lt;/a-entity&gt;\nCom isso temos todos os movimentos desejados para as nossas finalidades didáticas conforme mostrado no Vídeo 3.6.\n\n\n\nVideo\n\n\nVídeo 3.6: Sistema Sol-Terra-Lua com todos os movimentos e inclinações do eixo da Terra e da órbita da Lua, visto de perfil. (10x faster)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>O projeto Sol-Terra-Lua</span>"
    ]
  },
  {
    "objectID": "projetoSTL.html#fiat-lux",
    "href": "projetoSTL.html#fiat-lux",
    "title": "3  O projeto Sol-Terra-Lua",
    "section": "3.7 Fiat lux",
    "text": "3.7 Fiat lux\nPara finalizar o sistema STL, precisamos iluminar corretamente a cena. Primeiramente, precisamos que a fonte de luz principal esteja na posição do Sol, simulando a sua irradiação. Para isso utilizaremos o componente light na a-entity sol:\nlight=\"type: point; color: white; intensity: 2.5; castShadow: true\"\nO A-Frame possui vários tipos de luz como ambient, directional, hemisphere, point, spot e probe, mas nenhuma delas corresponde a uma fonte de luz extensa para simular melhor a iluminação solar. Ainda assim, o tipo point, em que a luz é emitida igualmente em todas as direções a partir de um ponto, reproduz os efeitos astronômicos que queremos explorar. Utilizamos o atributo castShadow: true pois, por padrão, para poupar processamento, o A-Frame não renderiza sombras entre as entidades da cena.\nÉ interessante também substituirmos a iluminação padrão da a-scene por uma luz ambiente fraca para obtermos um bom contraste entre a face dos astros iluminada pelo Sol e a face escura. Para isso, utilizaremos o tipo de luz ambient em uma nova a-entity logo no início da a-scene:\n&lt;a-entity&gt;\n    light=\"type: ambient; color: white; intensity: 0.005\"\n&lt;/a-entity&gt;\nEssa luz iluminará igualmente todos os objetos sem produzir sombras entre eles. Repare na diferença de intensidade (intensity) entre as duas luzes de forma a produzir o contraste desejado. De fato, essa luz ambiente praticamente não existe nos astros reais, mas uma pequena iluminação na face escura da Terra e da Lua facilita a percepção dos fenômenos.\nPrecisamos também informar que as duas entidades, a-entity terra e a-entity lua, precisam ser configuradas para receber e produzir sombras com o componente shadow:\nshadow=\"receive: true; cast: true\"\nPor fim, iremos definir a propriedade roughness (rugosidade) dos materiais da Terra e da Lua para o valor máximo de 1 (o padrão é 0,5):\nmaterial=\"src: #mapa_terra; roughness: 1\"\nEssa propriedade define o quão difusa é a reflexão na superfície do material. Um roughness baixo produz um efeito espelhado e um valor alto um efeito fosco.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>O projeto Sol-Terra-Lua</span>"
    ]
  },
  {
    "objectID": "projetoSTL.html#elementos-gráficos-de-referência",
    "href": "projetoSTL.html#elementos-gráficos-de-referência",
    "title": "3  O projeto Sol-Terra-Lua",
    "section": "3.8 Elementos gráficos de referência",
    "text": "3.8 Elementos gráficos de referência\nO nosso projeto STL está praticamente completo. Temos os movimentos de rotação e translação, as inclinações do eixo de rotação da Terra e do plano da órbita da Lua e a iluminação que reproduz a luz solar.\nEmbora esses elementos já sejam suficientes para trabalharmos os conceitos básicos de astronomia, podemos incluir elementos gráficos auxiliares que facilitam a percepção dos fenômenos. São eles:\n\nUma seta ao longo do eixo de rotação terrestre\nUm plano para a órbita da Terra\nUm plano para a órbita da Lua\nUm mapa de fundo do céu noturno\n\n\n3.8.1 Seta do eixo de rotação terrestre\nImplementaremos a seta indicativa do eixo de rotação terrestre usando as geometrias cylinder e cone em uma nova entidade a-entity eixo_terra, a qual será inserida dentro da a-entity terra, da seguinte forma:\n&lt;a-entity id=\"eixo_terra\"&gt;\n    &lt;a-entity\n        geometry=\"primitive: cylinder; height: 0.60; radius: 0.007\"\n        material=\"color: blue\"\n    &gt;&lt;/a-entity&gt;\n    &lt;a-entity\n        geometry=\"primitive: cone; radiusBottom: 0.03; radiusTop: 0; height: 0.1; segmentsRadial: 4; segmentsHeight: 4\"\n        material=\"color: blue\"\n        position=\"0 0.30 0\"\n    &gt;&lt;/a-entity&gt;\n&lt;/a-entity&gt;\n\n\n3.8.2 Planos orbitais\nFaremos os planos orbitais com a geometria circle.\nO plano orbital da Terra é estático e ficará ao lado das entidades a-entity terra e a-entity lua:\n&lt;a-entity\n    id=\"plano_terra\"\n    geometry=\"primitive: circle; radius: 2\"\n    material=\"side: double; opacity: 0.1; emissiveIntensity: 20; emissive: blue\"\n    rotation=\"90 0 0\"\n&gt;&lt;/a-entity&gt;\nO plano orbital da Lua ficará dentro da a-entity inc_orb_lua pois terá que seguir essa inclinação:\n&lt;a-entity\n    id=\"plano_lua\"\n    geometry=\"primitive: circle; radius: 0.5\"\n    material=\"side: double; opacity: 0.1; emissiveIntensity: 20; emissive: white\"\n    rotation=\"90 0 0\"\n&gt;&lt;/a-entity&gt;\nUtilizamos o atributo opacity para que os planos sejam transparentes e não interfiram significativamente na visualização. Os atributos emissiveIntensity foram usados com valores altos para que os planos produzam uma luz própria e não sejam afetados pela luz solar atrapalhando a visualização.\n\n\n3.8.3 Mapa do céu noturno\nPara dar mais realismo, vamos inserir um mapa do céu noturno. O procedimento é semelhante aos mapas das superfícies dos astros, exceto que existe uma entidade específica para isso no A-Frame, chamada de a-sky. O mapa também precisa ser uma projeção cilíndrica equidistante (equirectangular). Vamos incluí-la dentro de uma a-entity que roda o mapa do céu de 23,4° de forma que os polos celestes da imagem coincidam com os polos celestes de rotação da Terra:\n&lt;a-entity rotation=\"23.4 0 0\"&gt;\n    &lt;a-sky src=\"#skymap\"&gt;&lt;/a-sky&gt;\n&lt;/a-entity&gt;\nSendo que a imagem skymap utilizada deve ser incluída em assets da mesma forma que os demais mapas dos astros:\n&lt;img id=\"skymap\" src=\"https://i.postimg.cc/9mjwfS4J/Tycho-Skymap-16384x08192.jpg\"/&gt;\nEssa imagem (Figura 3.3) foi obtida do catálogo estelar Tycho e colocada temporariamente no postimg para que pudesse ser carregada online pelo a-Frame.\n\n\n\n\n\n\nFigura 3.3: Mapa estelar com estrelas dos catálogos Tycho e Hipparcos, em projeção cilíndrica equidistante (plate carrée) utilizando coordenadas celestes. Adequado para mapeamento em esferas em programas de animação. As estrelas são representadas como Point Spread Functions (PSF), com tamanho e intensidade correspondentes à sua luminosidade relativa.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>O projeto Sol-Terra-Lua</span>"
    ]
  },
  {
    "objectID": "projetoSTL.html#resultado-final",
    "href": "projetoSTL.html#resultado-final",
    "title": "3  O projeto Sol-Terra-Lua",
    "section": "3.9 Resultado final",
    "text": "3.9 Resultado final\n\n\n\n\n\n\n\n\n\nClique para expandir\n\n\n\n\n\n&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"https://aframe.io/releases/1.6.0/aframe.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/aframe-orbit-controls@1.3.2/dist/aframe-orbit-controls.min.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;a-scene&gt;\n      &lt;a-entity\n        camera\n        look-controls=\"enabled: false\"\n        orbit-controls=\"target: 0 0 0; minDistance: 0; maxDistance: 180; initialPosition: 0 3 5; rotateSpeed: 1.5\"\n      &gt;&lt;/a-entity&gt;\n\n      &lt;a-assets&gt;\n        &lt;img\n          id=\"mapa_sol\"\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Map_of_the_full_sun.jpg/1280px-Map_of_the_full_sun.jpg\"\n        /&gt;\n        &lt;img\n          id=\"mapa_terra\"\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Blue_Marble_2002.png/1280px-Blue_Marble_2002.png\"\n        /&gt;\n        &lt;img\n          id=\"mapa_lua\"\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Solarsystemscope_texture_8k_moon.jpg/1280px-Solarsystemscope_texture_8k_moon.jpg\"\n        /&gt;\n        &lt;img\n          id=\"skymap\"\n          src=\"https://i.postimg.cc/9mjwfS4J/Tycho-Skymap-16384x08192.jpg\"\n        /&gt;\n      &lt;/a-assets&gt;\n\n      &lt;a-entity\n        light=\"type: ambient; color: #ffffff; intensity: 0.005\"\n      &gt;&lt;/a-entity&gt;\n      &lt;a-entity rotation=\"23.4 0 0\"&gt;\n        &lt;a-sky src=\"#skymap\"&gt;&lt;/a-sky&gt;\n      &lt;/a-entity&gt;\n      &lt;a-entity id=\"pos_sol\" position=\"0 1.2 0\"&gt;\n        &lt;a-entity\n          id=\"sol\"\n          geometry=\"primitive: sphere; radius: 0.2\"\n          material=\"src: #mapa_sol; emissiveIntensity: 0.5; emissive: #f7e927\"\n          animation=\"property: rotation; to: 0 360 0; loop: true; dur: 50000; easing: linear\"\n          light=\"type: point; color: white; intensity: 2.5; castShadow:true\"\n        &gt;\n        &lt;/a-entity&gt;\n\n        &lt;a-entity\n          id=\"plano_terra\"\n          geometry=\"primitive: circle; radius: 2.3\"\n          material=\"side: double; opacity: 0.1; emissiveIntensity: 20; emissive: blue\"\n          rotation=\"90 0 0\"\n        &gt;&lt;/a-entity&gt;\n\n        &lt;a-entity\n          id=\"orb_terra\"\n          animation=\"property: rotation; to: 0 360 0; loop: true; dur: 30000; easing: linear\"\n        &gt;\n          &lt;a-entity id=\"pos_terra\" position=\"1.5 0.0 0\"&gt;\n            &lt;a-entity\n              id=\"rev_terra\"\n              animation=\"property: rotation; to: 0 360 0; loop: true; dur: 30000; easing: linear; dir: reverse\"\n            &gt;\n              &lt;a-entity id=\"inc_terra\" rotation=\"23.4 0 0\"&gt;\n                &lt;a-entity\n                  id=\"terra\"\n                  geometry=\"primitive: sphere; radius: 0.15\"\n                  material=\"src: #mapa_terra; roughness: 1\"\n                  animation=\"property: rotation; to: 0 360 0; loop: true; dur: 1000; easing: linear\"\n                  shadow=\"receive: true; cast: true\"\n                &gt;\n                  &lt;a-entity id=\"eixo_terra\"&gt;\n                    &lt;a-entity\n                      geometry=\"primitive: cylinder; height: 0.60; radius: 0.007\"\n                      material=\"color: blue\"\n                    &gt;&lt;/a-entity&gt;\n                    &lt;a-entity\n                      geometry=\"primitive: cone; radiusBottom: 0.03; radiusTop: 0; height: 0.1; segmentsRadial: 4; segmentsHeight: 4\"\n                      material=\"color: blue\"\n                      position=\"0 0.30 0\"\n                    &gt;&lt;/a-entity&gt;\n                  &lt;/a-entity&gt;\n                &lt;/a-entity&gt;\n              &lt;/a-entity&gt;\n\n              &lt;a-entity id=\"inc_orb_lua\" rotation=\"-25 0 0\"&gt;\n                &lt;a-entity\n                  id=\"plano_lua\"\n                  geometry=\"primitive: circle; radius: 0.8\"\n                  material=\"side: double; opacity: 0.1; emissiveIntensity: 20; emissive: white\"\n                  rotation=\"90 0 0\"\n                &gt;&lt;/a-entity&gt;\n                &lt;a-entity\n                  id=\"orb_lua\"\n                  animation=\"property: rotation; to: 0 360 0; loop: true; dur: 3000; easing: linear\"\n                &gt;\n                  &lt;a-entity id=\"pos_lua\" position=\"0 0.0 0.8\"&gt;\n                    &lt;a-entity\n                      id=\"lua\"\n                      grabbable\n                      geometry=\"primitive: sphere; radius: 0.05\"\n                      material=\"src: #mapa_lua; roughness: 1\"\n                      rotation=\"0 90 0\"\n                      shadow=\"receive: true; cast: true\"\n                    &gt;\n                    &lt;/a-entity&gt;\n                  &lt;/a-entity&gt;\n                &lt;/a-entity&gt;\n              &lt;/a-entity&gt;\n            &lt;/a-entity&gt;\n          &lt;/a-entity&gt;\n        &lt;/a-entity&gt;\n      &lt;/a-entity&gt;\n    &lt;/a-scene&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\nCódigo 3.8: Código completo do sistema STL.\n\n\n\n\n\n\n\n\n\nVídeo 3.7: Sistema STL em movimento com câmera estática externa.\n\n\n\nVeja também o sistema STL completo rodando no Glitch.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>O projeto Sol-Terra-Lua</span>"
    ]
  },
  {
    "objectID": "projetoSTL.html#aprimoramentos",
    "href": "projetoSTL.html#aprimoramentos",
    "title": "3  O projeto Sol-Terra-Lua",
    "section": "3.10 Aprimoramentos",
    "text": "3.10 Aprimoramentos\nVamos aprimorar nosso projeto de forma a incluir diversidade de visualizações e interatividade.\n\n3.10.1 Com os pés no chão\nAté agora não mexemos na posição da câmera. Ela permaneceu fixa em uma a-entity a parte, fora do sistema de coordenadas do Sol. Mas podemos colocar a câmera onde quisermos, inclusive fixa na superfície da Terra de forma a reproduzir nossa visão do céu. Para isso, basta retirarmos a câmera original e colocarmos uma nova dentro da a-entity terra:\n&lt;a-entity\n    id=\"terra\"                  \n    geometry=\"primitive: sphere; radius: 1.5; segmentsWidth:180; segmentsHeight:360\"\n    material=\"src: #mapa_terra; roughness: 1\"\n    animation=\"property: rotation; to: 0 360 0; loop: true; dur: 10000; easing: linear\"\n    shadow=\"receive: true; cast: true\"\n    &gt;\n    &lt;a-entity camera look-controls position=\"1.35 0.755 0\" fov=\"80\"&gt;&lt;/a-entity&gt;    \n&lt;/a-entity&gt;\nNo código acima, aumentamos a segmentação da esfera terrestre para uma superfície mais suave e aumentamos o seu raio para um horizonte menos curvo. Fora isso, o código é essencialmente o mesmo do Código 3.8.\nEssa posição da câmera produz a visualização mostrada no Vídeo 3.8.\n\n\n\n\n\n\nVídeo 3.8: Sistema STL visto por uma câmera colocada na superfície da Terra.\n\n\n\nVeja também o sistema Sol-Terra-Lua com câmera fixa na superfície da Terra no Glitch.\n\n\n3.10.2 Interação com os objetos\nNo A-Frame é muito simples incluir interação com as mãos do usuário. Basta incluir o componente hand-tracking-grab-controls em uma a-entity para cada mão:\n&lt;a-entity id=\"leftHand\"\n    hand-tracking-grab-controls=\"hand: left;\"\n&gt;&lt;/a-entity&gt;\n&lt;a-entity id=\"rightHand\"\n    hand-tracking-grab-controls=\"hand: right;\"\n&gt;&lt;/a-entity&gt;\nE incluir o componente grabbable nos objetos que poderão ser agarrados com as mãos. Por exemplo, para que a Terra seja “agarrável” incluímos o componente grabbable dentro da a-entity correspondente:\n&lt;a-entity id=\"terra\"\n    grabbable\n    geometry=\"primitive: sphere; radius: 0.15\"\n    material=\"src: #mapa_terra; roughness: 1\"\n    position=\"1 1.2 0\"\n    shadow=\"receive: true; cast: true\"                \n&gt;&lt;/a-entity&gt;\nO Código 3.9 corresponde a um sistema STL alternativo mais simples em que os astros não são animados, mas apenas habilitados para serem “agarráveis” pelo usuário. Apesar dessa simplicidade, as condições de iluminação dentro desse ambiente virtual são difíceis de reproduzir em um ambiente real, possibilitando explorar com riqueza os fenômenos que mencionamos anteriormente envolvendo as fases da Lua, eclipses e estações do ano. Vide Vídeo 3.9.\n\n\n\n&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"https://aframe.io/releases/1.6.0/aframe.min.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;a-scene&gt;\n      \n      &lt;a-assets&gt;\n        &lt;img id=\"mapa_sol\"\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Map_of_the_full_sun.jpg/1280px-Map_of_the_full_sun.jpg\"\n        /&gt;\n        &lt;img id=\"mapa_terra\"\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Blue_Marble_2002.png/1280px-Blue_Marble_2002.png\"\n        /&gt;\n        &lt;img id=\"mapa_lua\"\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Solarsystemscope_texture_8k_moon.jpg/1280px-Solarsystemscope_texture_8k_moon.jpg\"\n        /&gt;\n        &lt;img id=\"skymap\"\n          src=\"https://i.postimg.cc/9mjwfS4J/Tycho-Skymap-16384x08192.jpg\"\n        /&gt;        \n      &lt;/a-assets&gt;\n\n      &lt;a-entity camera look-controls position=\"0.5 1.6 0.3\"&gt;&lt;/a-entity&gt;\n      \n      &lt;a-entity id=\"leftHand\"\n        hand-tracking-grab-controls=\"hand: left;\"\n      &gt;&lt;/a-entity&gt;\n      &lt;a-entity id=\"rightHand\"\n        hand-tracking-grab-controls=\"hand: right;\"\n      &gt;&lt;/a-entity&gt;\n\n      &lt;a-entity\n        light=\"type: ambient; color: #ffffff; intensity: 0.005\"\n      &gt;&lt;/a-entity&gt;\n\n      &lt;a-sky src=\"#skymap\"&gt;&lt;/a-sky&gt;      \n        &lt;a-entity id=\"sol\"\n          grabbable\n          geometry=\"primitive: sphere; radius: 0.1\"\n          material=\"src: #mapa_sol; emissiveIntensity: 0.5; emissive: #f7e927\"\n          light=\"type: point; color: white; intensity: 2.5; castShadow:true\"\n          position=\"0 1.2 0\"\n        &gt;\n        &lt;/a-entity&gt;\n        &lt;a-entity id=\"terra\"\n          grabbable\n          geometry=\"primitive: sphere; radius: 0.15\"\n          material=\"src: #mapa_terra; roughness: 1\"\n          position=\"0.75 1.2 0\"\n          shadow=\"receive: true; cast: true\"                \n        &gt;&lt;/a-entity&gt;\n        &lt;a-entity id=\"lua\"\n          grabbable\n          geometry=\"primitive: sphere; radius: 0.05\"\n          material=\"src: #mapa_lua; roughness: 1\"\n          rotation=\"0 90 0\"\n          position=\"1 1.2 0.5\"\n          shadow=\"receive: true; cast: true\"\n        &gt;\n        &lt;/a-entity&gt;      \n    &lt;/a-scene&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n\nCódigo 3.9: Sistema STL simplificado sem animação, mas que permite que os objetos sejam agarráveis pelas mãos do usuário.\n\n\n\n\n\n\n\n\n\nVídeo 3.9: Vídeo mostrando a manipulação e os usos didáticos do sistema STL simplificado\n\n\n\nVeja também o sistema Sol-Terra-Lua manipulável no Glitch.\n\n\n3.10.3 Configurando a aplicação web para uso offline\nTer que depender de uma conexão com a internet toda vez que necessitar fazer uma atividade em Realidade Virtual pode ser limitante, principalmente quando não se dispuser de uma infraestrutura robusta de internet por WiFi, o que é muito comum no ambiente escolar.\nExiste uma forma simples de resolver isso através do chamado service worker com cache estático. Ele é usado para interceptar as requisições e armazenar os recursos necessários no cache do navegador, permitindo que a página continue a funcionar mesmo sem conexão com a internet. É um caminho eficiente e moderno, especialmente quando se espera que os usuários usem a página offline.\nPara isso, são necessários dois passos. Primeiramente, deve-se incluir o script Javascript (Código 3.10) dentro do elemento body do arquivo html principal.\n\n\n\n&lt;script&gt;\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () =&gt; {\n      navigator.serviceWorker.register('/service-worker.js')\n        .then((registration) =&gt; {\n          console.log('Service Worker registrado com sucesso:', registration);\n        })\n        .catch((error) =&gt; {\n          console.log('Falha ao registrar o Service Worker:', error);\n        });\n    });\n  }\n&lt;/script&gt;\n\n\nCódigo 3.10: Script Javascript a ser incluído no body do arquivo html de forma a permitir que a aplicação continue acessível ao navegador mesmo estando offline.\n\n\n\nPor fim, deve-se criar um arquivo como o nome service-worker.js na mesma pasta do arquivo html principal com o com o conteúdo do Código 3.11.\n\n\n\n// service-worker.js\nself.addEventListener('install', (event) =&gt; {\n  event.waitUntil(\n    caches.open('my-cache').then((cache) =&gt; {\n      return cache.addAll([\n        '/',\n        '/index.html',\n        'https://aframe.io/releases/1.6.0/aframe.min.js'\n      ]);\n    })\n  );\n});\n\nself.addEventListener('fetch', (event) =&gt; {\n  event.respondWith(\n    caches.match(event.request).then((response) =&gt; {\n      return response || fetch(event.request);\n    })\n  );\n});\n\n\nCódigo 3.11: Conteúdo do arquivo service-worker.js para acesso offline da aplicação web. Aqui estamos considerando que o arquivo principal chama-se index.html.\n\n\n\nScript Javascript a ser incluído no body do arquivo html de forma a permitir que a aplicação continue acessível ao navegador mesmo estando offline. :::\nÉ recomendado que o service-worker seja habilitado somente quando o projeto estiver pronto. Na fase de desenvolvimento, que requer que a página seja recarregada várias vezes, pode haver o cache indesejado de versões antigas da página html, causando confusão. Para garantir que a versão mais atual da página seja carregada com o service-worker ativo é necessário limpar o cache do navegador.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>O projeto Sol-Terra-Lua</span>"
    ]
  },
  {
    "objectID": "projetoSTL.html#palavras-finais",
    "href": "projetoSTL.html#palavras-finais",
    "title": "3  O projeto Sol-Terra-Lua",
    "section": "3.11 Palavras finais",
    "text": "3.11 Palavras finais\nCom isso, concluímos este minicurso. Apesar do A-Frame permitir a programação usando exclusivamente linguagem HTML, é possível usar todo o poder da linguagem Javascript para desenvolver aplicações mais sofisticadas. O modo correto de fazer isso no A-Frame é através da criação de novos Components, os quais receberão toda a lógica de programação em Javascript. Além disso, o A-Frame disponibiliza acesso a todas as funcionalidades da poderosa biblioteca gráfica Three.js (pois é uma abstração desta). E existe também as componentes criadas pela comunidade de desenvolvedores, as quais abrangem uma boa diversidade de usos. Escolhemos não abordar essas possibilidades devido à curta duração deste minicurso.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>O projeto Sol-Terra-Lua</span>"
    ]
  },
  {
    "objectID": "projetoSTL.html#footnotes",
    "href": "projetoSTL.html#footnotes",
    "title": "3  O projeto Sol-Terra-Lua",
    "section": "",
    "text": "Expressão cunhada pelo astrônomo e divulgador científico Carl Sagan ao descrever a imagem da Terra capturada pela sonda Voyager 1, a uma grande distância. No retrato, o planeta aparece como um minúsculo ponto azul. Sagan utilizou essa imagem para refletir sobre a humildade e a responsabilidade da humanidade em relação ao único lar conhecido.↩︎\nNa verdade, a Lua não gira em tono da Terra, mas em torno do centro de massa do sistema Terra-Lua, assim como a própria Terra. Por motivos didáticos, usaremos o sistema de referência centrado na Terra para implementar o movimento orbital da Lua. Essa aproximação não é tão ruim, uma vez que o centro de massa do sistema está bem mais próximo da Terra do que da Lua.↩︎\nA expressão em italiano que significa “E, no entanto, ela se move” teria sido dita por Galileu Galilei após ser forçado pela Inquisição a renegar sua defesa do heliocentrismo. Galileu teria murmurado a frase em desafio, reafirmando sua convicção, mesmo após a retratação oficial. Entretanto, não há evidências da vericidade dessa fala.↩︎\nO movimento de precessão do eixo de rotação terrestre realmente existe e é conhecido como precessão dos equinócios. Mas é um movimento muito lento, em que uma precessão completa dura 26 mil anos e é causada pela interação gravitacional da Terra oblata principalmente com o Sol e a Lua.↩︎\nNeste projeto, iremos considerar que a normal ao plano da órbita da Lua possui uma direção fixa no espaço. Mas isso não é verdade, pois assim como o eixo de rotação da Terra, o plano orbital da Lua possui um movimento de precessão (semelhante ao movimento de um bambolê) só que com um período bem mais curto de 18,6 anos. Apesar disso, representa uma alteração de direção em torno de 5% ao ano e não altera o fato de que temos dois momentos no ano em que ocorrem os eclipses separados por aproximadamente 6 meses. De um ano para o outro as datas dos eclipses vão se deslocando de 3 a 4 semanas devido a essa precessão. É esse movimento que determina o ciclo de Saros e sua causa se deve à força gravitacional diferencial que a Lua sofre do Sol ao longo da sua órbita em torno da Terra.↩︎",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>O projeto Sol-Terra-Lua</span>"
    ]
  }
]