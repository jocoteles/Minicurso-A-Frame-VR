---
title: O projeto Sol-Terra-Lua
lang: pt
code-overflow: wrap
---

Neste capítulo, aprenderemos o uso básico do [A-Frame](https://aframe.io/) por meio do desenvolvimento de um projeto para ensino de Astronomia.

No projeto Sol-Terra-Lua (abrev. STL) iremos:

- Criar as esferas solar, terrestre e lunar no espaço tridimensional em realidade aumentada.
- Texturizar a superfície das esferas com os mapas dos respectivos astros.
- Estabelecer os tamanhos e posições dos astros de forma pertinente aos objetivos didáticos de uma atividade educacional.
- Implementar o movimento de rotação de cada astro em torno do próprio eixo.
- Definir o plano orbital da Terra e da Lua.
- Implementar o movimento orbital de translação da Terra e da Lua.
- Dar interatividade aos objetos celestes.


## Elementos HTML do A-Frame

Todo o desenvolvimento do projeto será realizado no [Glitch](htmlbasico.qmd#disponibilizando-páginas-web-diretamente-na-internet-com-glitch).

1. Faça o login na sua conta do Glitch e remixe o projeto [aframe-minicurso-vr](https://glitch.com/edit/#!/aframe-minicurso-vr)

Repare que o projeto está bastante vazio, com apenas o arquivo `index.html` e sem qualquer código Javascript explícito. Entretanto, temos dentro do `head` a inclusão do arquivo online:

`https://aframe.io/releases/1.6.0/aframe.min.js`.

É esse arquivo, acessado remotamente, que disponibilizará o núcleo de funcionalidades do A-Frame.

1. O elemento HTML básico e obrigatório do A-Frame é o `<a-scene>` ([Cena](https://aframe.io/docs/1.6.0/core/scene.html)), o qual temos que incluir dentro do elemento `<body>`:

    ```html
    <body>
        <a-scene>
        </a-scene>
    </body>
    ```

Dentro do `<a-scene>` todos os elementos espaciais do projeto serão incluídos. Esses elementos recebem o nome de `<a-entity>` ([Entidades](https://aframe.io/docs/1.6.0/core/entity.html)). Cada entidade, por sua vez, terá uma série de propriedades, chamadas de *components* ([Componentes](https://aframe.io/docs/1.6.0/core/component.html)). Por fim, cada componente terá *atributos* que definirão as aparências e funcionalidades da entidade.

Esse tipo de estruturação segue o modelo ECS ([Entity-Component-System](https://aframe.io/docs/1.6.0/introduction/entity-component-system.html)) que é alternativo ao modelo de classes e objetos. Ele se opõe ao sistema de hierarquização da programação orientada a objetos ao permitir maior modularização e inter-operacionalização dos componentes que podem ser aplicados diretamente em diferentes entidades.

De forma abstrata, uma estrutura ECS no A-Frame poderia ser algo assim:

**Cena:**

- **Entidade 1**:
    
    - *Componente A* -> ***Atributo A1***: valor E1A1; ***Atributo A2***: valor E1A2
    - *Componente B* -> ***Atributo B1***: valor E1B1; ***Atributo B2***: valor E1B2

- **Entidade 2**:
    
    - *Componente A* -> ***Atributo A1***: valor E2A1; ***Atributo A2***: valor E2A2
    - *Componente C* -> ***Atributo C1***: valor E2C1; ***Atributo C2***: valor E2C2

Um exemplo mais concreto seria:

**a-scene:**

- **a-entity** `id = "carro"`:
    
    - `rodas = "quantidade : 4; aro: 20"`
    - `material = "cor: azul; metalicidade: 0.5"`

- **a-entity** `id = "moto"`:
    
    - `rodas = "quantidade : 2; aro: 40"`
    - `material = "cor: vermelho; metalicidade: 0.8"`

![Ilustração das *Entidades* carro e moto com seus *componentes* e *atributos* específicos (feita com DALL-E)](carro_e_moto.jpg)

Nesse exemplo, *carro* e *moto* são ***entidades*** distintas, mas *rodas* e *material* são ***componentes*** que podem ser usados pelas diferentes entidades. Esses componentes irão se diferenciar por possuírem valores diferentes para os seus ***atributos*** (e.g. rodas com `quantidade : 2` ou `quantidade : 4`) e por estarem atrelados a diferentes entidades. Uma das vantages dessa abordagem ECS é que eu preciso programar o componente *rodas* somente uma vez e ele pode ser usado em diferentes veículos.

Entidades podem ser aninhadas. Por exemplo, ao invés de tratar as rodas como sendo componentes, poderíamos considerar mais apropriado implementá-las na forma de uma entidade:

**a-scene:**

- **a-entity** `id = "fusca"`:

    - **a-entity** `id = "rodas_do_fusca"`:    
        
        - `material = "cor: preto; metalicidade: 0.1"`
        - `dimensoes = "aro: 20; largura: 10; quantidade: 4"`

- **a-entity** `id = "moto"`:
    
    - `rodas = "quantidade : 2; aro: 40"`
    - `material = "cor: vermelho; metalicidade: 0.8"`

Vamos então criar nossa primeira entidade: o planeta Terra.

2. Coloque a entidade abaixo dentro do elemento a-scene:

    ```html 
    <a-entity id="terra"
        geometry="primitive: sphere"
        material="color: blue">
    </a-entity>
    ``` 

Se fizermos o preview lateral para tentarmos observar o resultado, provavelmente não veremos nada. Isso ocorre, pois não estamos usando os óculos de realidade virtual. A melhor forma de interagir com a página gerada na tela do computador é escolhendo a opção *Preview in a new window*. Na página que foi aberta, devemos entrar no modo de inspeção ([Visual inspector](https://aframe.io/docs/1.6.0/introduction/visual-inspector-and-dev-tools.html#a-frame-inspector)) ao digitar a combinação de teclas `<ctrl>` + `<alt>` + `i`.

Cada botão do mouse quando mantido apertado permite rotacionar, transladar e aproximar/afastar a visão da cena. Ao clicar em uma entidade é possível também aferir e alterar os valores dos seus atributos. É possível até mesmo criar entidades novas e atribuir componentes no *Visual inspector*. Ao apertar a tecla `h` (*help*), temos acesso a todas as teclas de atalho.

Voltando à Terra, vamos "dar um talento" em nosso *pale blue dot*.[^1] Para isso, usaremos uma imagem planificada da superfície da Terra para projetá-la na esfera. Por sorte, o A-Frame faz isso muito diretamente para a gente. Vejamos como.

## Carregando arquivos externos em nosso projeto STL

O A-Frame possui um elemento chamado `<a-asset>` para pré-carregar todos os recursos (imagens, áudios, vídeos, etc) que sejam usados na página. Existem duas formas para fazer isso:

- Carregando o recurso dentro do Glitch via *Files* no menu lateral de arquivos.
- Indicando o endereço de internet (URL) do recurso caso ele esteja disponível.

No momento, vamos usar a segunda opção.

3. Clique com o botão direito do mouse sobre o mapa da Terra abaixo e copie o seu link.

![[Mapa terrestre planificado. Fonte: https://upload.wikimedia.org/](https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Blue_Marble_2002.png/1280px-Blue_Marble_2002.png)](1280px-Blue_Marble_2002.png)

4. Dentro do `<a-scene>` inclua o elemento:

    ```html
    <a-assets>
        <img id="mapa_terra" src="substitua_isto_pelo_endereço_da_imagem">
    </a-assets>
    ``` 

5. Em seguida substitua o atributo *color* por *src* no componente *material* da entidade `terra`, usando como valor a `id` do mapa da Terra:

    ```html
    <a-entity id="terra"
        geometry="primitive: sphere"
        material="src: #mapa_terra"> <!--<1>-->
    </a-entity>
    ``` 
    1. Atributo `src` no lugar de `color`.


## Sistemas de coordenadas no A-Frame

Uma característica muito útil no A-Frame, é o conceito de sistemas de coordenadas locais (também chamados de referenciais), que é fácil de implementar quando você aninha uma `<a-entity>` dentro de outra.

Pense que cada entidade tem seu próprio sistema de coordenadas (x, y, z), que define sua posição, rotação e escala. Quando uma `<a-entity>` está dentro de outra, dizemos que a entidade interna usa o sistema de referência local da entidade que a contém. Isso significa que qualquer transformação (movimento, rotação) aplicada à entidade "pai" afeta todas as suas "filhas" de forma relativa. Ou seja, quando criamos uma `<a-entity>`, não definimos apenas as propriedades do objeto 3D pelas suas componentes, mas também, implicitamente, criamos um sistema de coordenadas local.

Podemos, ainda, criar uma `<a-entity>` "vazia", ou seja, sem componentes geométricos como componentes dela. Nesse caso, ela serve exclusivamente como um sistema de coordenadas de referência para todas outras entidades que sejam aninhadas dentro dela.

E o nosso projeto Sol-Terra-Lua se beneficia diretamente desse recurso. Vamos considerar uma `<a-entity>` que representa, exclusivamente, o referencial Terra (`ref_terra`) e dentro dela outra `<a-entity>` que representa a Lua. Se você mover ou rotacionar o referencial Terra (a entidade "pai"), a Lua (a entidade "filha") será movida junto, mas ela ainda pode orbitar ao redor do referencial Terra se aplicarmos uma rotação à Lua individualmente. Assim, a Lua se move de duas maneiras: ela orbita o Sol ao "seguir" a Terra (movimento da entidade "pai") e orbita a Terra (movimento da entidade "filha").[^3]

![Ao deslocar a `a-entity ref-Terra` (referencial "pai"), a `a-entity lua` (entidade filha) desloca-se conjuntamente. Ao deslocar a `a-entity lua`, a `a-entity ref_Terra` permanece inalterada.](referencial_terra.mp4){loop="true"}

Portanto, o A-Frame é muito prático para simular cenários em que o movimento de um objeto depende de outro, como no caso de planetas em órbita, satélites, ou até objetos conectados em uma cadeia de eventos. Ao invés de ter que recalcular constantemente as posições de todos os objetos manualmente, o A-Frame faz isso automaticamente ao respeitar as hierarquias de aninhamento.

## Cada astro em seu lugar

Neste ponto, temos todos os elementos para a construção do sistema Sol-Terra-Lua.

6. Primeiramente, vamos atualizar os nossos assets com as imagens das superfícies do Sol e da Lua:
    
    ```html
    <a-assets>
        <img id="mapa_sol" src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Map_of_the_full_sun.jpg/1280px-Map_of_the_full_sun.jpg">
        <img id="mapa_terra" src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Blue_Marble_2002.png/1280px-Blue_Marble_2002.png">
        <img id="mapa_lua" src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Solarsystemscope_texture_8k_moon.jpg/1280px-Solarsystemscope_texture_8k_moon.jpg">
    </a-assets>
    ```

Vamos agora inserir cada astro em seu devido lugar e com o seu devido tamanho. Poderíamos respeitar a escala relativa de tamanhos, mas como o Sol é muito maior que a Terra (cerca de 100 vezes), vamos adotar uma escala alternativa para fins didáticos. O mesmo vale para as distâncias entre os astros (a distância Sol-Terra é cerca de 500 vezes maior que a Terra-Lua).

A @tbl-dimensoes contém os tamanhos (raios esféricos) e distâncias ao astro "pai" (raios orbitais) dos astros do projeto.

+-------+---------------------+-----------------------------+
| Astro | Raio esférico       | Raio orbital                |
+=======+:====================+:============================+
| Sol   | - real: 700 mil km  | - não se aplica             |
|       | - util: 30 cm       | - não se aplica             | 
+-------+---------------------+-----------------------------+
| Terra | - real: 6,4 mil km  | - real: 150 milhões km      |
|       | - util: 15 cm       | - util: 1,5 m               |
+-------+---------------------+-----------------------------+
| Lua   | - real: 1,7 mil km  | - real: 384 mil km          |
|       | - util: 5 cm        | - util: 0,5 m               |
+-------+---------------------+-----------------------------+

: Dimensões dos astros em valores reais (real) e com os valores utilizados (util) no projeto. {#tbl-dimensoes .striped .hover}

Vamos criar o sistema de coordenadas de cada astro a uma distância do astro "pai" igual aos raios orbitais (util) da @tbl-dimensoes. O Sol será a entidade que comporá o sistema de coordenadas pai. Dentro dele, criaremos uma entidade para o referencial Terra e, dentro deste, o referencial Lua.

Teremos, portanto, o seguinte aninhamento de sistemas de coordenadas:

```html
<a-entity id="pos_sol" position="0 0 0">
    <a-entity id="pos_terra" position="1.5 0 0">
        <a-entity id="pos_lua" position="0 0 0.5">        
        </a-entity>
    </a-entity>    
</a-entity>
```

Repare que para as distâncias usamos o componente `position` cujo atributo é uma trinca de coordenadas `x, y, z`.

Agora, vamos colocar a entidade que representa a esfera de cada astro dentro dos respectivos referenciais.

7. Para isso, substitua o código 5 pelo seguinte:

    ```html
    <a-entity id="pos_sol" position="0 0 0">
        
        <a-entity id="sol"
            geometry="primitive: sphere; radius: 0.3"
            material="src: #mapa_sol">
        </a-entity>
        
        <a-entity id="pos_terra" position="1.5 0.0 0">  

            <a-entity id="terra"
                geometry="primitive: sphere; radius: 0.15"
                material="src: #mapa_terra">
            </a-entity>            

            <a-entity id="pos_lua" position="0 0.0 0.5">                

                <a-entity id="lua"
                    geometry="primitive: sphere; radius: 0.05"
                    material="src: #mapa_lua">
                </a-entity>
        
            </a-entity>                
        </a-entity>        
    </a-entity>
    ```

Repare que para o raio esférico de cada astro, usamos o atributo `radius` do componente `geometry`. Outra observação é que todas as dimensões são informadas ao A-Frame sem explicitar as unidades, pois o A-Frame considera todas elas em metros.

![Sol-Terra-Lua gerado pelo código 7 e visto de cima. Cada divisão do grid (em cinza claro) corresponde a 0,5 metros. As setas correspondem às direções x (vermelha à direita), y (verde saindo da tela) e z (azul para baixo).](STL_visto_de_cima.png)


## Animando as coisas

Como já dizia o sábio Galileu, "*Eppur si muove*".[^2] Vamos então pôr o mundo a girar.

O A-Frame possui várias possibilidades de animação *built in* através do componente `animation`. Os atributos principais desse componente são:

- `property`: a propriedade da entidade que será animada, e.g. ângulo de rotação, posição, grau de transparência, etc.
- `from`: o valor inicial da propriedade (default: o valor atual).
- `to`: o valor final da propriedade ao término da animação.
- `dur`: duração da animação em milissegundos.
- `loop`: se a animação deve ser reiniciada automaticamente (`true` ou `false`).
- `easing`: a taxa de variação da propriedade (default: aumento quadrático = aceleração constante).
- `dir`: sentido da animação (`normal` ou `reverse`).


### Movimento orbital {#sec-movimento_orbital}

O movimento orbital, também conhecido por movimento de translação, será implementado por uma entidade específica (e.g. `orb_terra`) colocada acima da entidade do raio orbital (e.g. `pos_terra`). Essa entidade terá o componente `animation` que rotacionará a `a-entity pos_terra` que por sua vez está deslocada do centro pelo raio orbital especificado na componente `position`.

Da mesma forma que fizemos com as dimensões espaciais, não seremos fieis às proporções temporais da dinâmica dos astros. A @tbl-periodos contém os períodos de rotação e orbital que escolhemos para os três astros.

+-------+--------------------+--------------------+
| Astro | Período de rotação | Período orbital    |
+=======+:===================+:===================+
| Sol   | - real: 30 dias    | - não se aplica    |
|       | - util: 50 s       | - não se aplica    | 
+-------+--------------------+--------------------+
| Terra | - real: 24 horas   | - real: 365,3 dias |
|       | - util: 10 s       | - util: 300 s      |
+-------+--------------------+--------------------+
| Lua   | - real: 29,5 dias  | - real: 29,5 dias  |
|       | - util: 30 s       | - util: 30 s       |
+-------+--------------------+--------------------+

: Períodos dos astros em valores reais (real) e com os valores utilizados no projeto (util) {#tbl-periodos .striped .hover}

Por exemplo, considerando somente o movimento orbital da Terra, teríamos o seguinte código:

```html
<a-entity id="orb_terra" animation="property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear">
    
    <a-entity id="pos_terra" position="1.5 0.0 0">  

        <a-entity id="terra"
            geometry="primitive: sphere; radius: 0.15"
            material="src: #mapa_terra">
        </a-entity>

    </a-entity>               

</a-entity>
```

Com ele, deveremos observar a Terra orbitando em torno do Sol *ad aeternum* (`loop: true`) com velocidade constante (`easing: linear`) e executando uma revolução (`to: 0 360 0`) a cada 300 segundos (`dur: 300000`). Vide vídeo abaixo.

![Ilustração do movimento orbital da Terra usando o `animation` da `a-entity orb_terra`. A cada órbita completa, a Terra dá, também, uma volta em torno do próprio eixo (quando próxima à câmera, apresenta a África voltada para nós, quando longe, apresenta o Pacífico). (10x faster)](movimento_orbital_travado.mp4){loop="true"}

Com isso, conseguimos implementar o movimento orbital da Terra. Entretanto, essa `animation` produz, adicionalmente, um movimento de rotação da Terra em torno do próprio eixo. Esse é um efeito indesejado, pois queremos que o movimento de rotação e o orbital sejam independentes um do outro.

Se quisermos implementar corretamente a rotação da Terra e da Lua em torno de um eixo fixo, temos que compensar essa rotação espúria. Caso contrário, a direção do eixo ficará girando em torno da perpendicular à órbita em um movimento conhecido como precessão[^5].

Para reverter essa rotação indesejada, podemos utilizar uma `animation` de rotação no sentido contrário `dir: reverse` em uma nova entidade `a-entity rev_rot_terra` dentro da `a-entity pos_terra`. Ficando da seguinte forma:

```html
<a-entity id="orb_terra" animation="property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear">

    <a-entity id="pos_terra" position="1.5 0.0 0">  

        <a-entity id="rev_rot_terra" animation="property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear; dir: reverse">
                            
            <a-entity id="terra"
                geometry="primitive: sphere; radius: 0.15"
                material="src: #mapa_terra">
            </a-entity>                            

        </a-entity>               
    </a-entity>        
</a-entity>
```

Esse código resulta no movimento orbital da Terra sem o movimento espúrio de rotação em torno do próprio eixo, conforme vemos no vídeo abaixo.

![Ilustração do movimento orbital da Terra com a compensação da rotação espúria em torno do próprio eixo usando um `animation` com rotação no sentido contrário. Nesse caso, a Terra não gira em torno do próprio eixo, estando as Américas sempre voltadas para a câmera. (10x faster)](movimento_orbital_livre.mp4){loop="true"}


### Movimento de rotação

Agora vamos implementar o movimento desejado de rotação da Terra em torno do próprio eixo.

Fazemos isso incluindo o componente `animation` na `a-entity terra`:

```html
<a-entity id="terra"
    geometry="primitive: sphere"
    material="src: #mapa_terra"
    animation="property: rotation; to: 0 360 0; loop: true; dur: 10000; easing: linear"> <!-- <1> -->
</a-entity>
```
1. Componente `animation` para rotação da Terra.

Assim, deveremos observar a Terra girando *ad aeternum* (`loop: true`) com velocidade constante (`easing: linear`) e executando uma revolução (`to: 0 360 0`) a cada 10 segundos (`dur: 10000`). O vídeo a seguir ilustra esse movimento isoladamente (sem o movimento orbital).

![Terra em movimento de rotação com o componente `animation`.](terra_girando.mp4){loop="true"}


### Movimento completo

8. Implementado os movimentos de rotação e orbital discutidos acima no sistema Sol-Terra-Lua completo temos o seguinte código que substitui o código 7:

    ```html
    <a-entity id="pos_sol" position="0 0 0">
        
        <a-entity id="sol"
            geometry="primitive: sphere; radius: 0.3"
            material="src: #mapa_sol"
            animation="property: rotation; to: 0 360 0; loop: true; dur: 50000; easing: linear">
        </a-entity>
        
        <a-entity id="orb_terra" animation="property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear">

            <a-entity id="pos_terra" position="1.5 0.0 0">  

                <a-entity id="rev_rot_terra" animation="property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear; dir: reverse">
                                    
                    <a-entity id="terra"
                        geometry="primitive: sphere; radius: 0.15"
                        material="src: #mapa_terra"
                        animation="property: rotation; to: 0 360 0; loop: true; dur: 10000; easing: linear">
                    </a-entity>                            

                    <a-entity id="orb_lua" animation="property: rotation; to: 0 360 0; loop: true; dur: 30000; easing: linear">

                        <a-entity id="pos_lua" position="0 0.0 0.5">                

                            <a-entity id="lua"
                                geometry="primitive: sphere; radius: 0.05"
                                material="src: #mapa_lua">
                            </a-entity>
                    
                        </a-entity>                
                    </a-entity> 
                </a-entity>               
            </a-entity>        
        </a-entity>        
    </a-entity>
    ```

Há algo importante a observar no código acima. Não implementamos a `a-entity rev_lua` relacionada à compensação da rotação espúria causada pelo movimento orbital da Lua e nem o `animation` de rotação da Lua em torno do próprio eixo na `a-entity lua`. Sabemos que devido ao efeito de "travamento gravitacional" pelas forças de maré atuando ao longo de milhões de anos, a Lua orbita com a mesma face voltada para Terra. Isso implica que o período de translação coincide com o de rotação. Portanto, nesse caso, a rotação espúria da `a-entity orb_lua` já nos fornece, de brinde, a rotação da Lua em torno do próprio eixo. 

![Sistema Sol-Terra-Lua com todos os movimentos -- de rotação e orbital -- implementados.](stl_animado.mp4){loop="true"}



MANTER ISSO:
Recarregue a página de preview e entre no modo de inspeção (`<ctrl><alt>i`). A Terra ainda estará parada. Isso ocorre pois devemos acionar o botão ▶ (*resume scene*) no canto superior esquerdo. 



## Refinando o sistema

Se quisermos explorar conceitos como estações do ano, fases da Lua e eclipses, existem certos detalhes do movimento dos astros que podemos abrir mão, como a excentricidade das órbitas, o movimento em torno do centro de massa, movimento de precessão e nutação, entre outros. Mas alguns são essenciais para aqueles fenômenos. São eles: (i) a inclinação do eixo de rotação da Terra e (ii) a inclinação do plano da órbita da Lua.

### Inclinação do eixo de rotação da Terra


Como sabemos, o eixo de rotação da Terra possui uma inclinação de 23,4° em relação à direção perpendicular ao plano da órbita. Em nosso sistema, podemos implementar essa inclinação em uma nova `a-entity inc_terra` colocada imediatamente acima da `a-entity terra`, usando o componente `rotation`:

```html        
<a-entity id="inc_terra" rotation="23.4 0 0">
    <a-entity id="terra"
        geometry="primitive: sphere; radius: 0.15"
        material="src: #mapa_terra"
        animation="property: rotation; to: 0 360 0; loop: true; dur: 10000; easing: linear">
    </a-entity>
</a-entity>    
```

Repare que a rotação se dá na direção $x$, uma vez que a perpendicular da órbita está na direção $y$.


### Inclinação do plano orbital da Lua

O plano da órbita da Lua em torno da Terra possui uma inclinação de 5,14° em relação ao plano da órbita da Terra em torno do Sol. Apesar de não ser uma inclinação tão alta, é ela que faz com que não tenhamos um eclipse em cada lua nova (Lua entre o Sol e a Terra) ou em cada lua cheia (Terra entre o Sol e a Lua) -- ou seja, um eclipse solar e outro lunar todo mês.

Como não estamos utilizando uma escala de tamanhos e distâncias proporcionais ao tamanho real dos astros, precisamos usar uma inclinação maior para reproduzir o correto efeito dos eclipses em nosso sistema. Adotaremos uma inclinação de 25°. Faremos isso aplicando o componente `rotation` na nova entidade `a-entity inc_orb_lua` imediatamente acima da `a-entity orb_lua`, conforme o código a seguir:

```html
<a-entity id="inc_orb_lua" rotation="-25 0 0">

    <a-entity id="orb_lua" animation="property: rotation; to: 0 360 0; loop: true; dur: 30000; easing: linear">    

        <a-entity id="rev_orb_lua" animation="property: rotation; to: 0 360 0; loop: true; dur: 30000; easing: linear; dir: reverse">

            <a-entity id="pos_lua" position="0 0.0 0.5">                

                <a-entity id="lua"
                    geometry="primitive: sphere; radius: 0.05"
                    material="src: #mapa_lua">
                </a-entity>

            </a-entity>
        </a-entity>            
    </a-entity>            
</a-entity>                
``` 

### The dark side of the Moon

Embora não implique em qualquer efeito prático importante, orientar a Lua com a face correta voltada para a Terra é uma questão simples de resolver e dá mais realismo ao sistema. Verificamos que uma simples rotação de 90° na `a-entity lua` resolve a questão:

```html
<a-entity id="lua"
    geometry="primitive: sphere; radius: 0.05"
    material="src: #mapa_lua"
    rotation="0 90 0">
</a-entity>
```


## Fiat lux

Para finalizar o sistema STL, precisamos iluminar corretamente a cena. Primeiramente, precisamos que a fonte de luz principal esteja na posição do Sol, simulando a sua irradiação. Para isso utilizaremos o componente `light` na `a-entity sol`:

```html
light="type: point; color: white; intensity: 2.5; castShadow: true"
```

O A-Frame possui vários tipos de luz como `ambient`, `directional`, `hemisphere`, `point`, `spot` e `probe`, mas nenhuma delas corresponde a uma fonte de luz extensa para simular melhor a irradiação solar. Ainda assim, o tipo `point`, em que a luz é emitida igualmente em todas as direções a partir de um ponto, reproduz bem os efeitos astronômicos que queremos explorar. Utilizamos o atributo `castShadow: true` pois, por padrão, para poupar processamento, o A-Frame não renderiza sombras entre as entidades da cena.

É interessante também substituirmos a iluminação padrão da `a-scene` por uma luz ambiente fraca para obtermos um bom contraste entre a face dos astros iluminada pelo Sol e a face escura. Para isso, utilizaremos o tipo de luz `ambient` em uma nova `a-entity` logo no início da `a-scene`:

```html
<a-entity>
    light="type: ambient; color: white; intensity: 0.005"
</a-entity>
```

Essa luz iluminará igualmente todos os objetos sem produzir sombras entre eles. Repare na diferença de intensidade (`intensity`) entre as duas luzes de forma a produzir o contraste desejado. De fato, essa luz ambiente praticamente não existe nos astros reais, mas uma pequena iluminação na face escura da Terra e da Lua facilita a percepção dos fenômenos. 

Precisamos também informar que as duas entidades, `a-entity terra` e `a-entity lua` precisam ser configuradas para receber e produzir sombras com o componente:

```html
shadow="receive: true; cast: true"
```

Por fim, iremos definir a propriedade `roughness` (rugosidade) dos materiais da Terra e da Lua para o valor máximo de 1 (o padrão é 0,5):

```html
material="src: #mapa_terra; roughness: 1"
```

Essa propriedade define o quão difusa é a reflexão na superfície do material. Um `roughness` baixo produz um efeito espelhado e um valor alto um efeito fosco. 


## Elementos gráficos de referência

O nosso projeto STL está completo. Temos os movimentos de rotação e translação, as inclinações do eixo de rotação da Terra e do plano da órbita da Lua e a iluminação que reproduz a luz solar.

Embora esses elementos já sejam suficientes para trabalharmos os conceitos relevantes de astronomia, podemos incluir elementos gráficos auxiliares que facilitam a percepção dos fenômenos. São eles:

- Uma seta ao longo do eixo de rotação terrestre
- Um plano para a órbita da Terra
- Um plano para a órbita da Lua
- Um mapa de fundo do céu noturno

### Seta do eixo de rotação terrestre

Implementaremos a seta indicativa do eixo de rotação terrestre usando as geometrias `cylinder` e `cone` em uma nova entidade `a-entity eixo_terra`, a qual será inserida dentro da `a-entity terra`, da seguinte forma:

```html
<a-entity id="eixo_terra">
    <a-entity
        geometry="primitive: cylinder; height: 0.60; radius: 0.007"
        material="color: blue"
    ></a-entity>
    <a-entity
        geometry="primitive: cone; radiusBottom: 0.03; radiusTop: 0; height: 0.1; segmentsRadial: 4; segmentsHeight: 4"
        material="color: blue"
        position="0 0.30 0"
    ></a-entity>
</a-entity>
```

### Planos orbitais

Faremos os planos orbitais com a geometria `circle`.

O plano orbital da Terra é estático e ficará ao lado das entidades `a-entity terra` e `a-entity lua`:

```html
<a-entity
    id="plano_terra"
    geometry="primitive: circle; radius: 2"
    material="side: double; opacity: 0.1; emissiveIntensity: 20; emissive: blue"
    rotation="90 0 0"
></a-entity>
``` 

O plano orbital da Lua ficará dentro da `a-entity inc_orb_lua` pois terá que seguir essa inclinação:

```html
<a-entity
    id="plano_lua"
    geometry="primitive: circle; radius: 0.5"
    material="side: double; opacity: 0.1; emissiveIntensity: 20; emissive: white"
    rotation="90 0 0"
></a-entity>
```

### Mapa do céu noturno

Para dar mais realismo, vamos inserir um mapa do céu noturno. O procedimento é semelhante aos mapas das superfícies dos astros, exceto que existe uma entidade específica para isso no A-Frame:

```html
    <a-entity id="pos_sol" position="0 0 0">
```

Sendo que a imagem `skymap` utilizada deve ser incluída em `assets` da mesma forma que os demais mapas dos astros:

```html
<img id="skymap" src="https://i.postimg.cc/fzD0BmTC/Tycho-Skymap-t4-04096x02048.jpg"/>
```

Essa imagem foi obtida do [catálogo estelar Tycho](https://svs.gsfc.nasa.gov/3442/) e colocada temporariamente no *postimg* para que pudesse ser carregada online pelo a-Frame.


## Resultado final

O vídeo abaixo apresenta a renderização completa do projeto STL.



::: {.callout-tip title="Aqui está o código completo do projeto STL" collapse="true"}
```html
<!DOCTYPE html>

<html>
  <head>
    <script src="https://aframe.io/releases/1.6.0/aframe.min.js"></script>
    <script src="https://unpkg.com/aframe-orbit-controls@1.3.2/dist/aframe-orbit-controls.min.js"></script>
  </head>

  <body>
    <a-scene>
      <a-entity
        camera
        look-controls="enabled: false"
        orbit-controls="target: 0 0 0; minDistance: 0; maxDistance: 180; initialPosition: 0 3 5; rotateSpeed: 1.5"
      ></a-entity>

      <a-assets>
        <img
          id="mapa_sol"
          src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Map_of_the_full_sun.jpg/1280px-Map_of_the_full_sun.jpg"
        />
        <img
          id="mapa_terra"
          src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Blue_Marble_2002.png/1280px-Blue_Marble_2002.png"
        />
        <img
          id="mapa_lua"
          src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Solarsystemscope_texture_8k_moon.jpg/1280px-Solarsystemscope_texture_8k_moon.jpg"
        />
      </a-assets>

      <a-entity
        light="type: ambient; color: #ffffff; intensity: 0.005"
      ></a-entity>
      <a-entity id="pos_sol" position="0 0 0">
        <a-entity
          id="sol"
          geometry="primitive: sphere; radius: 0.2"
          material="src: #mapa_sol; emissiveIntensity: 0.5; emissive: #f7e927"
          animation="property: rotation; to: 0 360 0; loop: true; dur: 50000; easing: linear"
          light="type: point; color: white; intensity: 2.5; castShadow:true"
        >
        </a-entity>

        <a-entity
          id="plano_terra"
          geometry="primitive: circle; radius: 2.3"
          material="side: double; opacity: 0.1; emissiveIntensity: 20; emissive: blue"
          rotation="90 0 0"
        ></a-entity>

        <a-entity
          id="orb_terra"
          animation="property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear"
        >
          <a-entity id="pos_terra" position="1.5 0.0 0">
            <a-entity
              id="rev_terra"
              animation="property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear; dir: reverse"
            >
              <a-entity id="inc_terra" rotation="23.4 0 0">
                <a-entity
                  id="terra"
                  geometry="primitive: sphere; radius: 0.15"
                  material="src: #mapa_terra; roughness: 1"
                  animation="property: rotation; to: 0 360 0; loop: true; dur: 10000; easing: linear"
                  shadow="receive: true; cast: true"
                >
                  <a-entity id="eixo_terra">
                    <a-entity
                      geometry="primitive: cylinder; height: 0.60; radius: 0.007"
                      material="color: blue"
                    ></a-entity>
                    <a-entity
                      geometry="primitive: cone; radiusBottom: 0.03; radiusTop: 0; height: 0.1; segmentsRadial: 4; segmentsHeight: 4"
                      material="color: blue"
                      position="0 0.30 0"
                    ></a-entity>
                  </a-entity>
                </a-entity>
              </a-entity>

              <a-entity id="inc_orb_lua" rotation="-25 0 0">
                <a-entity
                  id="plano_lua"
                  geometry="primitive: circle; radius: 0.8"
                  material="side: double; opacity: 0.1; emissiveIntensity: 20; emissive: white"
                  rotation="90 0 0"
                ></a-entity>
                <a-entity
                  id="orb_lua"
                  animation="property: rotation; to: 0 360 0; loop: true; dur: 30000; easing: linear"
                >
                  <a-entity id="pos_lua" position="0 0.0 0.8">
                    <a-entity
                      id="lua"
                      geometry="primitive: sphere; radius: 0.05"
                      material="src: #mapa_lua; roughness: 1"
                      rotation="0 90 0"
                      shadow="receive: true; cast: true"
                    >
                    </a-entity>
                  </a-entity>
                </a-entity>
              </a-entity>
            </a-entity>
          </a-entity>
        </a-entity>
      </a-entity>
    </a-scene>
  </body>
</html>
```
:::

[^1]:
    Expressão cunhada pelo astrônomo e divulgador científico Carl Sagan ao descrever a imagem da Terra capturada pela sonda Voyager 1, a uma grande distância. No retrato, o planeta aparece como um minúsculo ponto azul. Sagan utilizou essa imagem para refletir sobre a humildade e a responsabilidade da humanidade em relação ao único lar conhecido.

[^2]:
    A expressão em italiano que significa "E, no entanto, ela se move" teria sido dita por Galileu Galilei após ser forçado pela Inquisição a renegar sua defesa do heliocentrismo. Galileu teria murmurado a frase em desafio, reafirmando sua convicção, mesmo após a retratação oficial. Entretanto, não há evidências da vericidade dessa fala.

[^3]:
    Na verdade, a Lua não gira em tono da Terra, mas em torno do centro de massa do sistema Terra-Lua, assim como a própria Terra. Por motivos didáticos, usaremos o sistema de referência centrado na Terra para implementar o movimento orbital da Lua. Essa aproximação não é tão ruim, uma vez que o centro de massa do sistema está bem mais próximo da Terra do que da Lua.

[^4]:
    O período do Sol se refere à rotação em relação às estrelas distantes, também chamado de período sideral. O período da Terra e da Lua correspondem ao período sinódico que é o período para que o astro volte à mesma posição em relação ao astro que ele orbita. 

[^5]:
    O movimento de precessão do eixo de rotação terrestre realmente existe e é conhecido como precessão dos equinócios. Mas é um movimento muito lento, em que uma precessão completa dura 26 mil anos e é causada pela interação gravitacional da Terra oblata principalmente com o Sol e a Lua.