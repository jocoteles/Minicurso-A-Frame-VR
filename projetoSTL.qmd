---
title: O projeto Sol-Terra-Lua
lang: pt
code-overflow: wrap
---

Neste capítulo, aprenderemos o uso básico do [A-Frame](https://aframe.io/) por meio do desenvolvimento de um projeto para ensino de Astronomia.

No projeto Sol-Terra-Lua (abrev. STL) iremos:

- Criar as esferas solar, terrestre e lunar no espaço tridimensional em realidade aumentada.
- Texturizar a superfície das esferas com os mapas dos respectivos astros.
- Estabelecer os tamanhos e posições dos astros de forma pertinente aos objetivos didáticos de uma atividade educacional.
- Implementar o movimento de rotação de cada astro em torno do próprio eixo.
- Definir o plano orbital da Terra e da Lua.
- Implementar o movimento orbital da Terra e da Lua.
- Dar interatividade aos objetos celestes.


## Elementos HTML do A-Frame

Todo o desenvolvimento do projeto será realizado no [Glitch](htmlbasico.qmd#disponibilizando-páginas-web-diretamente-na-internet-com-glitch).

1. Faça o login na sua conta do Glitch e remixe o projeto [aframe-minicurso-vr](https://glitch.com/edit/#!/aframe-minicurso-vr)

Repare que o projeto está bastante vazio, com apenas o arquivo `index.html` e sem qualquer código Javascript explícito. Entretanto, temos dentro do `head` a inclusão do arquivo online:

`https://aframe.io/releases/1.6.0/aframe.min.js`.

É esse arquivo, acessado remotamente, que disponibilizará o núcleo de funcionalidades do A-Frame.

1. O elemento HTML básico e obrigatório do A-Frame é o `<a-scene>` ([Cena](https://aframe.io/docs/1.6.0/core/scene.html)), o qual temos que incluir dentro do elemento `<body>`:

    ```html
    <body>
        <a-scene>
        </a-scene>
    </body>
    ```

Dentro do `<a-scene>` todos os elementos espaciais do projeto serão incluídos. Esses elementos recebem o nome de `<a-entity>` ([Entidades](https://aframe.io/docs/1.6.0/core/entity.html)). Cada entidade, por sua vez, terá uma série de propriedades, chamadas de *components* ([Componentes](https://aframe.io/docs/1.6.0/core/component.html)). Por fim, cada componente terá *atributos* que definirão as aparências e funcionalidades da entidade.

Esse tipo de estruturação segue o modelo ECS (Entity-Component-System) que é alternativo ao modelo de classes e objetos. Ele se opõe ao sistema de hierarquização da programação orientada a objetos ao permitir maior modularização e inter-operacionalização dos componentes que podem ser aplicados diretamente em diferentes entidades.

De forma abstrata, uma estrutura ECS no A-Frame poderia ser algo assim:

**Cena:**

- **Entidade 1**:
    
    - *Componente A* -> ***Atributo A1***: valor E1A1; ***Atributo A2***: valor E1A2
    - *Componente B* -> ***Atributo B1***: valor E1B1; ***Atributo B2***: valor E1B2

- **Entidade 2**:
    
    - *Componente A* -> ***Atributo A1***: valor E2A1; ***Atributo A2***: valor E2A2
    - *Componente C* -> ***Atributo C1***: valor E2C1; ***Atributo C2***: valor E2C2

Um exemplo mais concreto seria:

**a-scene:**

- **a-entity** `id = "carro"`:
    
    - `rodas = "quantidade : 4; aro: 20"`
    - `material = "cor: azul; metalicidade: 0.5"`

- **a-entity** `id = "moto"`:
    
    - `rodas = "quantidade : 2; aro: 40"`
    - `material = "cor: vermelho; metalicidade: 0.8"`

![Ilustração das *Entidades* carro e moto com seus *componentes* e *atributos* específicos (feita com DALL-E)](carro_e_moto.jpg)

Nesse exemplo, *carro* e *moto* são ***entidades*** distintas, mas *rodas* e *material* são ***componentes*** que podem ser compartilhados pelas diferentes entidades. Esses componentes irão se diferenciar por possuírem valores diferentes para os seus ***atributos*** (e.g. rodas com `quantidade : 2` ou `quantidade : 4`) e por estarem atrelados a diferentes entidades. Uma das vantages dessa abordagem ECS é que eu preciso programar o componente *rodas* somente uma vez e ele pode ser usado em diferentes veículos.

Entidades podem ser aninhadas. Por exemplo, ao invés de tratar as rodas como sendo componentes, poderíamos considerar mais apropriado implementá-las na forma de uma entidade:

**a-scene:**

- **a-entity** `id = "fusca"`:

    - **a-entity** `id = "rodas_do_fusca"`:    
        
        - `material = "cor: preto; metalicidade: 0.1"`
        - `dimensoes = "aro: 20; largura: 10; quantidade: 4"`

- **a-entity** `id = "moto"`:
    
    - `rodas = "quantidade : 2; aro: 40"`
    - `material = "cor: vermelho; metalicidade: 0.8"`

Vamos então criar nossa primeira entidade: o planeta Terra.

2. Coloque a entidade abaixo dentro do elemento a-scene:

    ```html 
    <a-entity id="terra"
        geometry="primitive: sphere"
        material="color: blue">
    </a-entity>
    ``` 

Se fizermos o preview lateral para tentarmos observar o resultado, provavelmente não veremos nada. Isso ocorre, pois não estamos usando os óculos de realidade virtual. A melhor forma de interagir com a página gerada na tela do computador é escolhendo a opção *Preview in a new window*. Na página que foi aberta, devemos entrar no modo de inspeção ([Visual inspector](https://aframe.io/docs/1.6.0/introduction/visual-inspector-and-dev-tools.html#a-frame-inspector)) ao digitar a combinação de teclas `<ctrl>` + `<alt>` + `i`.

Cada botão do mouse quando mantido apertado permite rotacionar, transladar e aproximar/afastar a visão da cena. Ao clicar em uma entidade é possível também aferir e alterar os valores dos seus atributos. É possível até mesmo criar entidades novas e atribuir componentes no *Visual inspector*. Ao apertar a tecla `h` (*help*), temos acesso a todas as teclas de atalho.

Voltando à Terra, vamos "dar um talento" em nosso *pale blue dot*.[^1] Para isso, usaremos uma imagem planificada da superfície da Terra para projetá-la na esfera. Por sorte, o A-Frame faz isso muito diretamente para a gente. Vejamos como.

## Carregando arquivos externos em nosso projeto STL

O A-Frame possui um elemento chamado `<a-asset>` para pré-carregar todos os recursos (imagens, áudios, vídeos, etc) que sejam usados na página. Existem duas formas para fazer isso:

- Carregando o recurso dentro do Glitch via *Files* no menu lateral de arquivos.
- Indicando o endereço de internet (URL) do recurso caso ele esteja disponível.

No momento, vamos usar a segunda opção.

3. Clique com o botão direito do mouse sobre o mapa da Terra abaixo e copie o seu link.

![[Mapa terrestre planificado. Fonte: https://upload.wikimedia.org/](https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Blue_Marble_2002.png/1280px-Blue_Marble_2002.png)](1280px-Blue_Marble_2002.png)

4. Dentro do `<a-scene>` inclua o elemento:

    ```html
    <a-assets>
        <img id="mapa_terra" src="substitua_isto_pelo_endereço_da_imagem">
    </a-assets>
    ``` 

5. Em seguida substitua o atributo *color* por *src* no componente *material* da entidade `terra`, usando como valor a `id` do mapa da Terra:

    ```html
    <a-entity id="terra"
        geometry="primitive: sphere"
        material="src: #mapa_terra"> <!--<1>-->
    </a-entity>
    ``` 
    1. Atributo `src` no lugar de `color`.


## Sistemas de coordenadas no A-Frame

Uma característica muito poderosa no A-Frame, é o conceito de sistemas de referências locais (referenciais), que é fácil de implementar quando você aninha uma `<a-entity>` dentro de outra.

Pense que cada entidade tem seu próprio sistema de coordenadas (x, y, z), que define sua posição, rotação e escala. Quando uma `<a-entity>` está dentro de outra, dizemos que a entidade interna usa o sistema de referência local da entidade que a contém. Isso significa que qualquer transformação (movimento, rotação) aplicada à entidade "pai" afeta todas as suas "filhas" de forma relativa. Ou seja, quando criamos uma `<a-entity>`, não definimos apenas as propriedades do objeto 3D pelas suas componentes, mas também, implicitamente, criamos um sistema de coordenadas local.

Podemos, ainda, criar uma `<a-entity>` "vazia", ou seja, sem componentes geométricos "plugados" nela. Nesse caso, ela serve exclusivamente como um sistema de coordenadas de referência para todas outras entidades que sejam aninhadas dentro dela.

E o nosso projeto Sol-Terra-Lua se beneficia diretamente desse recurso. Vamos considerar uma `<a-entity>` que representa, exclusivamente, o referencial Terra e dentro dela outra `<a-entity>` que representa a Lua. Se você mover ou rotacionar o referencial Terra (a entidade "pai"), a Lua (a entidade "filha") será movida junto, mas ela ainda pode orbitar ao redor do referencial Terra se aplicarmos uma rotação à Lua individualmente. Assim, a Lua se move de duas maneiras: ela orbita o Sol ao "seguir" a Terra (movimento da entidade "pai") e orbita a Terra (movimento da entidade "filha").[^3]

![Ao deslocar a `a-entity ref-Terra` (referencial "pai"), a `a-entity lua` (entidade filha) desloca-se conjuntamente. Ao deslocar a `a-entity lua`, a `a-entity ref-Terra` permanece inalterada.](referencial_terra.mp4){loop="true"}

Portanto, o A-Frame é muito prático para simular cenários em que o movimento de um objeto depende de outro, como no caso de planetas em órbita, satélites, ou até objetos conectados em uma cadeia de eventos. Ao invés de ter que recalcular constantemente as posições de todos os objetos manualmente, o A-Frame faz isso automaticamente ao respeitar as hierarquias de aninhamento.

## Cada astro em seu lugar

Neste ponto, temos todos os elementos para a construção do sistema Sol-Terra-Lua.

6. Primeiramente, vamos atualizar os nossos assets com as imagens das superfícies do Sol e da Lua:
    
    ```html
    <a-assets>
        <img id="mapa_sol" src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Map_of_the_full_sun.jpg/1280px-Map_of_the_full_sun.jpg">
        <img id="mapa_terra" src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Blue_Marble_2002.png/1280px-Blue_Marble_2002.png">
        <img id="mapa_lua" src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Solarsystemscope_texture_8k_moon.jpg/1280px-Solarsystemscope_texture_8k_moon.jpg">
    </a-assets>
    ```

Vamos criar os sistemas de coordenadas. O Sol será a entidade que comporá o sistema de coordenadas pai. Dentro dele, criaremos uma entidade para o referencial Terra e, dentro deste, o referencial Lua.

7. Teremos, portanto, o seguinte aninhamento de sistemas de coordenadas:

    ```html
    <a-entity id="ref_sol">
        <a-entity id="ref_terra">
            <a-entity id="ref_lua">        
            </a-entity>
        </a-entity>    
    </a-entity>
    ```

Vamos agora inserir cada astro em seu devido lugar e com o seu devido tamanho. Poderíamos respeitar a escala relativa de tamanhos, mas como o Sol é muito maior que a Terra (cerca de 100 vezes), vamos adotar uma escala intermediária para fins didáticos. O mesmo vale para as distâncias entre os astros (a distância Sol-Terra é cerca de 500 vezes maior que Terra-Lua).

A @tbl-dimensoes contém os tamanhos e distâncias dos astros do projeto.

+-------+---------------------+-----------------------------+
| Astro | Diâmetro            | Distância ao astro central  |
+=======+:====================+:============================+
| Sol   | - real: 140 mil km  | - não se aplica             |
|       | - util: 30 cm       | - não se aplica             | 
+-------+---------------------+-----------------------------+
| Terra | - real: 12,7 mil km | - real: 150 milhões km      |
|       | - util: 15 cm       | - util: 1,5 m               |
+-------+---------------------+-----------------------------+
| Lua   | - real: 3,5 mil km  | - real: 384 mil km          |
|       | - util: 5cm         | - util: 0,5 m               |
+-------+---------------------+-----------------------------+

: Dimensões dos astros em valores reais (real) e com os valores utilizados no projeto (util) {#tbl-dimensoes .striped .hover}


Para os diâmetros, usamos o atributo `radius` do componente `geometry` e para as distâncias usamos o componente `position`. No A-Frame, a unidade de distância é o metro.

8. As entidades de cada astro nos seus respectivos referenciais fica da seguinte forma:

    ```html
    <a-entity id="ref_sol" position="0 0 0">
        
        <a-entity id="sol"
            geometry="primitive: sphere; radius: 0.3"
            material="src: #mapa_sol">
        </a-entity>
        
        <a-entity id="ref_terra"><a-entity position="1.5 0.0 0">
          
            <a-entity id="terra"
                geometry="primitive: sphere; radius: 0.15"
                material="src: #mapa_terra">
            </a-entity>
            
            <a-entity id="ref_lua"><a-entity position="0 0.0 0.5">
                
                <a-entity id="lua"
                    geometry="primitive: sphere; radius: 0.05"
                    material="src: #mapa_lua">
                </a-entity>
            
            </a-entity></a-entity>
        
        </a-entity></a-entity>

    </a-entity>
    ```

Repare que tivemos que colocar o componente `position` em uma `a-entity` própria dentro da `a-entity` de referencial. Isso é necessário para que os eixos de rotação associados ao movimento orbital estejam fora do centro do astro orbitante. Outra observação é que todas as dimensões são informadas ao A-Frame sem explicitar as unidades, pois o A-Frame considera todas elas metros.

## Animando as coisas

Como já dizia o sábio Galileu, "*Eppur si muove*".[^2] Vamos então pôr o mundo a girar.

O A-Frame possui várias possibilidades de animação *built in* através do componente `animation`. Os atributos principais desse componente são:

- `property`: a propriedade da entidade que será animada, e.g. ângulo de rotação, posição, grau de transparência, etc.
- `from`: o valor inicial da propriedade (default: o valor atual).
- `to`: o valor final da propriedade ao término da animação.
- `dur`: duração da animação em milissegundos.
- `loop`: se a animação deve ser reiniciada automaticamente após `dur` ms (`ture`ou `false`).
- `easing`: a taxa de variação da propriedade (default: aumento quadrático = aceleração constante).

### Rotações em torno do próprio eixo

Comecemos implementando a rotação da Terra em torno do próprio eixo.

9. Para isso, inclua o seguinte componente `animation` na entidade `terra`:

    ```html
    <a-entity id="terra"
        geometry="primitive: sphere"
        material="src: #mapa_terra"
        animation="property: rotation; to: 0 360 0; loop: true; dur: 10000; easing: linear"> <!-- <1> -->
    </a-entity>
    ```
    1. Componente `animation` para rotação da Terra.

10. Recarregue a página de preview e entre no modo de inspeção (`<ctrl><alt>i`). A Terra ainda estará parada. Isso ocorre pois devemos acionar o botão ▶ (*resume scene*) no canto superior esquerdo. 

Assim, deveremos observar a Terra girando *ad aeternum* (`loop: true`) com velocidade constante (`easing: linear`) e executando uma revolução (`to: 0 360 0`) a cada 10 segundos (`dur: 10000`).

![Terra em movimento de rotação com o componente `animation`.](terra_girando.mp4){loop="true"}


### Movimento orbital {#sec-movimento_orbital}

O movimento orbital será implementado pela rotação do sistema de coordenadas associado ao astro. Para isso, incluiremos o componente `animation` que agora rotacionará o astro não em torno do centro, mas em torno da posição dada pelo componente `position` na `a-entity` interna.

Da mesma forma que fizemos com as dimensões espaciais, não seremos fieis às proporções temporais da dinâmica dos astros. A @tbl-periodos contém os períodos de rotação e orbital que escolhemos para os três astros.

+-------+--------------------+--------------------+
| Astro | Período de rotação | Período orbital    |
+=======+:===================+:===================+
| Sol   | - real: 30 dias    | - não se aplica    |
|       | - util: 50 s       | - não se aplica    | 
+-------+--------------------+--------------------+
| Terra | - real: 24 horas   | - real: 365,3 dias |
|       | - util: 10 s       | - util: 300 s      |
+-------+--------------------+--------------------+
| Lua   | - real: 29,5 dias  | - real: 29,5 dias  |
|       | - util: 30 s       | - util: 30 s       |
+-------+--------------------+--------------------+

: Períodos dos astros em valores reais (real) e com os valores utilizados no projeto (util) {#tbl-periodos .striped .hover}


11. Portanto, o movimento orbital da Terra será implementado por:

    ```html
        <a-entity id="ref_terra" animation="property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear"><a-entity position="1.5 0.0 0">
    ```

Assim, deveremos observar a Terra orbitando em torno do Sol *ad aeternum* (`loop: true`) com velocidade constante (`easing: linear`) e executando uma revolução (`to: 0 360 0`) a cada 300 segundos (`dur: 300000`).

12. Aplicando as animações correspondentes à Lua, o sistema STL completo fica da seguinte forma:

    ```html
        <a-entity id="ref_sol" position="0 0 0">
            
            <a-entity id="sol"
                geometry="primitive: sphere; radius: 0.3"
                material="src: #mapa_sol">
            </a-entity>
            
            <a-entity id="ref_terra" animation="property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear"><a-entity position="1.5 0.0 0">
            
                <a-entity id="terra"
                    geometry="primitive: sphere; radius: 0.15"
                    material="src: #mapa_terra"
                    animation="property: rotation; to: 0 360 0; loop: true; dur: 10000; easing: linear">
                </a-entity>
                
                <a-entity id="ref_lua" animation="property: rotation; to: 0 360 0; loop: true; dur: 30000; easing: linear"><a-entity position="0 0.0 0.5">
                    
                    <a-entity id="lua"
                        geometry="primitive: sphere; radius: 0.05"
                        material="src: #mapa_lua">
                    </a-entity>
                
                </a-entity></a-entity>
            
            </a-entity></a-entity>

        </a-entity>
    ```

Há algo importante a observar no código acima. Não implementamos o `animation` associado à rotação da Lua em torno do próprio eixo. Isso significa que essa rotação não existe? Existe sim! Sabemos que devido ao efeito de "travamento" gravitacional pelas forças de maré atuando ao longo de milhões de anos, a Lua orbita com a mesma face voltada para Terra. Isso implica que o período de translação coincide com o de rotação. Quando fazemos a rotação de um sistema de referência no A-Frame, esse "travamento" ocorre por padrão, por isso que não precisamos incluir a `animation` correspondente. 

![Sistema Sol-Terra-Lua com todos os movimentos -- de rotação e orbital -- implementados.](stl_animado.mp4){loop="true"}


## Refinando o sistema

Se quisermos explorar conceitos como estações do ano, fases da Lua e eclipses, existem certos detalhes do movimento dos astros que podemos abrir mão, como a excentricidade das órbitas, o movimento em torno do centro de massa ao invés do centro do astro, movimento de precessão e nutação, entre outros. Mas alguns são essenciais e estão na origem e geram as especificidades importantes daqueles fenômenos. São eles: (i) a inclinação do eixo de rotação da Terra e (ii) a inclinação do plano da órbita da Lua em torno da Terra em relação ao plano da órbita da Terra em torno do Sol.

### Inclinação do eixo de rotação da Terra

Conforme explicamos na seção @sec-movimento_orbital, a rotação de uma `a-entity` fora de centro no A-Frame ocorre de forma "travada". Isso significa que uma volta completa do astro em torno do centro também causa uma volta completa do astro em torno do próprio eixo. Para entender melhor esse efeito, observe o vídeo 1 em que a Terra é vista orbitando o Sol de perfil aplicando `animation` somente à `a-entity ref-terra` e sem aplicar `animation` de rotação em torno do próprio eixo:

```html        
    <a-entity id="ref_terra" animation="property: rotation; to: 0 360 0; loop: true; dur: 300000; easing: linear"><a-entity position="1.5 0.0 0">
    
        <a-entity id="terra"
            geometry="primitive: sphere; radius: 0.15"
            material="src: #mapa_terra">
        </a-entity>
                            
    </a-entity></a-entity>
```

![Ilustração do movimento orbital da Terra usando somente o `animation` da `a-entity ref-terra`. A cada volta na órbita a Terra dá uma volta em torno do próprio eixo (quando próxima à câmera, apresenta a África voltada para nós, quando longe, apresenta o Pacífico.](movimento_orbital_travado.mp4){loop="true"}

[^1]:
    Expressão cunhada pelo astrônomo e divulgador científico Carl Sagan ao descrever a imagem da Terra capturada pela sonda Voyager 1, a uma grande distância. No retrato, o planeta aparece como um minúsculo ponto azul. Sagan utilizou essa imagem para refletir sobre a humildade e a responsabilidade da humanidade em relação ao único lar conhecido.

[^2]:
    A expressão em italiano que significa "E, no entanto, ela se move" teria sido dita por Galileu Galilei após ser forçado pela Inquisição a renegar sua defesa do heliocentrismo. Galileu teria murmurado a frase em desafio, reafirmando sua convicção, mesmo após a retratação oficial. Entretanto, não há evidências da vericidade dessa fala.

[^3]:
    Na verdade, a Lua não gira em tono da Terra, mas em torno do centro de massa do sistema Terra-Lua, assim como a própria Terra. Por motivos didáticos, usaremos o sistema de referência centrado na Terra para implementar o movimento orbital da Lua. Essa aproximação não é tão ruim, uma vez que o centro de massa do sistema está bem mais próximo da Terra do que da Lua.

[^4]:
    O período do Sol se refere à rotação em relação às estrelas distantes, também chamado de período sideral. O período da Terra e da Lua correspondem ao período sinódico que é o período para que o astro volte à mesma posição em relação ao astro que ele orbita. 